<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
  <commandGroup name="image builder">
    <command name="show" version="2022-07-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.imageTemplateName" options="image-template-name name n" required="True" idPart="name">
          <help short="The name of the image Template"/>
          <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="VirtualMachineImageTemplates_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
          <request method="get">
            <path>
              <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.VirtualMachineImages/imageTemplates/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity" required="True">
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="integer32" name="buildTimeoutInMinutes">
                      <default value="0"/>
                      <format maximum="960" minimum="0"/>
                    </prop>
                    <prop type="array<object>" name="customize">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;File&quot;"/>
                            <item value="&quot;PowerShell&quot;"/>
                            <item value="&quot;Shell&quot;"/>
                            <item value="&quot;WindowsRestart&quot;"/>
                            <item value="&quot;WindowsUpdate&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="File">
                          <prop type="string" name="destination"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="string" name="sourceUri"/>
                        </discriminator>
                        <discriminator property="type" value="PowerShell">
                          <prop type="array<string>" name="inline">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="runAsSystem">
                            <default value="false"/>
                          </prop>
                          <prop type="boolean" name="runElevated">
                            <default value="false"/>
                          </prop>
                          <prop type="string" name="scriptUri"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="array<integer32>" name="validExitCodes">
                            <item type="integer32"/>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="Shell">
                          <prop type="array<string>" name="inline">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="scriptUri"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="WindowsRestart">
                          <prop type="string" name="restartCheckCommand"/>
                          <prop type="string" name="restartCommand"/>
                          <prop type="string" name="restartTimeout"/>
                        </discriminator>
                        <discriminator property="type" value="WindowsUpdate">
                          <prop type="array<string>" name="filters">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="searchCriteria"/>
                          <prop type="integer32" name="updateLimit">
                            <default value="0"/>
                            <format minimum="0"/>
                          </prop>
                        </discriminator>
                      </item>
                    </prop>
                    <prop type="array<object>" name="distribute" required="True">
                      <item type="object">
                        <prop type="object" name="artifactTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="runOutputName" required="True">
                          <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                        </prop>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;ManagedImage&quot;"/>
                            <item value="&quot;SharedImage&quot;"/>
                            <item value="&quot;VHD&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="ManagedImage">
                          <prop type="string" name="imageId" required="True"/>
                          <prop type="string" name="location" required="True"/>
                        </discriminator>
                        <discriminator property="type" value="SharedImage">
                          <prop type="boolean" name="excludeFromLatest">
                            <default value="false"/>
                          </prop>
                          <prop type="string" name="galleryImageId" required="True"/>
                          <prop type="array<string>" name="replicationRegions">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                              <item value="&quot;Standard_ZRS&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<object>" name="targetRegions">
                            <item type="object">
                              <prop type="string" name="name" required="True"/>
                              <prop type="integer32" name="replicaCount">
                                <default value="1"/>
                                <format minimum="1"/>
                              </prop>
                              <prop type="string" name="storageAccountType">
                                <enum>
                                  <item value="&quot;Premium_LRS&quot;"/>
                                  <item value="&quot;Standard_LRS&quot;"/>
                                  <item value="&quot;Standard_ZRS&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                          <prop type="object" name="versioning">
                            <prop type="string" name="scheme" required="True">
                              <enum>
                                <item value="&quot;Latest&quot;"/>
                                <item value="&quot;Source&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="scheme" value="Latest">
                              <prop type="integer32" name="major">
                                <default value="-1"/>
                                <format minimum="-1"/>
                              </prop>
                            </discriminator>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="VHD">
                          <prop type="string" name="uri"/>
                        </discriminator>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="exactStagingResourceGroup"/>
                    <prop type="object" name="lastRunStatus">
                      <prop type="dateTime" name="endTime"/>
                      <prop type="string" name="message"/>
                      <prop type="string" name="runState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Canceling&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;PartiallySucceeded&quot;"/>
                          <item value="&quot;Running&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="runSubState">
                        <enum>
                          <item value="&quot;Building&quot;"/>
                          <item value="&quot;Customizing&quot;"/>
                          <item value="&quot;Distributing&quot;"/>
                          <item value="&quot;Optimizing&quot;"/>
                          <item value="&quot;Queued&quot;"/>
                          <item value="&quot;Validating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="startTime"/>
                    </prop>
                    <prop type="object" name="optimize">
                      <prop type="object" name="vmBoot">
                        <prop type="string" name="state">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="provisioningError">
                      <prop type="string" name="message"/>
                      <prop type="string" name="provisioningErrorCode">
                        <enum>
                          <item value="&quot;BadCustomizerType&quot;"/>
                          <item value="&quot;BadDistributeType&quot;"/>
                          <item value="&quot;BadManagedImageSource&quot;"/>
                          <item value="&quot;BadPIRSource&quot;"/>
                          <item value="&quot;BadSharedImageDistribute&quot;"/>
                          <item value="&quot;BadSharedImageVersionSource&quot;"/>
                          <item value="&quot;BadSourceType&quot;"/>
                          <item value="&quot;BadStagingResourceGroup&quot;"/>
                          <item value="&quot;BadValidatorType&quot;"/>
                          <item value="&quot;NoCustomizerScript&quot;"/>
                          <item value="&quot;NoValidatorScript&quot;"/>
                          <item value="&quot;Other&quot;"/>
                          <item value="&quot;ServerError&quot;"/>
                          <item value="&quot;UnsupportedCustomizerType&quot;"/>
                          <item value="&quot;UnsupportedValidatorType&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="source" required="True">
                      <prop type="string" name="type" required="True">
                        <enum>
                          <item value="&quot;ManagedImage&quot;"/>
                          <item value="&quot;PlatformImage&quot;"/>
                          <item value="&quot;SharedImageVersion&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="type" value="ManagedImage">
                        <prop type="string" name="imageId" required="True"/>
                      </discriminator>
                      <discriminator property="type" value="PlatformImage">
                        <prop readOnly="True" type="string" name="exactVersion"/>
                        <prop type="string" name="offer"/>
                        <prop type="object" name="planInfo">
                          <prop type="string" name="planName" required="True"/>
                          <prop type="string" name="planProduct" required="True"/>
                          <prop type="string" name="planPublisher" required="True"/>
                        </prop>
                        <prop type="string" name="publisher"/>
                        <prop type="string" name="sku"/>
                        <prop type="string" name="version"/>
                      </discriminator>
                      <discriminator property="type" value="SharedImageVersion">
                        <prop readOnly="True" type="string" name="exactVersion"/>
                        <prop type="string" name="imageVersionId" required="True"/>
                      </discriminator>
                    </prop>
                    <prop type="string" name="stagingResourceGroup"/>
                    <prop type="object" name="validate">
                      <prop type="boolean" name="continueDistributeOnFailure">
                        <default value="false"/>
                      </prop>
                      <prop type="array<object>" name="inVMValidations">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;File&quot;"/>
                              <item value="&quot;PowerShell&quot;"/>
                              <item value="&quot;Shell&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="File">
                            <prop type="string" name="destination"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="string" name="sourceUri"/>
                          </discriminator>
                          <discriminator property="type" value="PowerShell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="runAsSystem">
                              <default value="false"/>
                            </prop>
                            <prop type="boolean" name="runElevated">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="array<integer32>" name="validExitCodes">
                              <item type="integer32"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="Shell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="boolean" name="sourceValidationOnly">
                        <default value="false"/>
                      </prop>
                    </prop>
                    <prop type="object" name="vmProfile">
                      <prop type="integer32" name="osDiskSizeGB">
                        <default value="0"/>
                        <format minimum="0"/>
                      </prop>
                      <prop type="array<string>" name="userAssignedIdentities">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="vmSize">
                        <default value="&quot;&quot;"/>
                      </prop>
                      <prop type="object" name="vnetConfig">
                        <prop type="string" name="proxyVmSize">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="string" name="subnetId"/>
                      </prop>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="delete" version="2022-07-01" confirmation="Are you sure you want to perform this operation?">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.imageTemplateName" options="image-template-name name n" required="True" idPart="name">
          <help short="The name of the image Template"/>
          <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <operation operationId="VirtualMachineImageTemplates_Delete">
        <longRunning finalStateVia="location"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
          <request method="delete">
            <path>
              <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200"/>
          <response statusCode="202">
            <header>
              <item name="Location"/>
            </header>
          </response>
          <response statusCode="204"/>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
    </command>
    <command name="create" version="2022-07-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.imageTemplateName" options="image-template-name name n" required="True" idPart="name">
          <help short="The name of the image Template"/>
          <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="object" var="$parameters.identity" options="identity" required="True" group="Parameters">
          <help short="The identity of the image template, if configured."/>
          <arg type="string" var="$parameters.identity.type" options="type">
            <help short="The type of identity used for the image template. The type 'None' will remove any identities from the image template."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities">
            <help short="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."/>
            <additionalProp>
              <item type="object">
                <blank value="{}"/>
              </item>
            </additionalProp>
          </arg>
        </arg>
        <arg type="ResourceLocation" var="$parameters.location" options="location l" required="True" group="Parameters">
          <help short="The geo-location where the resource lives"/>
        </arg>
        <arg type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags."/>
          <additionalProp>
            <item type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg type="integer32" var="$parameters.properties.buildTimeoutInMinutes" options="build-timeout-in-minutes" group="Properties">
          <help short="Maximum duration to wait while building the image template (includes all customizations, optimization, validations, and distributions). Omit or specify 0 to use the default (4 hours)."/>
          <default value="0"/>
          <format maximum="960" minimum="0"/>
        </arg>
        <arg type="array<object>" var="$parameters.properties.customize" options="customize" group="Properties">
          <help short="Specifies the properties used to describe the customization steps of the image, like Image source etc"/>
          <item type="object">
            <arg type="object" var="$parameters.properties.customize[].File" options="file">
              <arg type="string" var="$parameters.properties.customize[].File.destination" options="destination">
                <help short="The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].File.sha256Checksum" options="sha256-checksum">
                <help short="SHA256 checksum of the file provided in the sourceUri field above"/>
                <default value="&quot;&quot;"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].File.sourceUri" options="source-uri">
                <help short="The URI of the file to be uploaded for customizing the VM. It can be a github link, SAS URI for Azure Storage, etc"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.customize[].PowerShell" options="power-shell">
              <arg type="array<string>" var="$parameters.properties.customize[].PowerShell.inline" options="inline">
                <help short="Array of PowerShell commands to execute"/>
                <item type="string"/>
              </arg>
              <arg type="boolean" var="$parameters.properties.customize[].PowerShell.runAsSystem" options="run-as-system">
                <help short="If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true."/>
                <default value="false"/>
              </arg>
              <arg type="boolean" var="$parameters.properties.customize[].PowerShell.runElevated" options="run-elevated">
                <help short="If specified, the PowerShell script will be run with elevated privileges"/>
                <default value="false"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].PowerShell.scriptUri" options="script-uri">
                <help short="URI of the PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].PowerShell.sha256Checksum" options="sha256-checksum">
                <help short="SHA256 checksum of the power shell script provided in the scriptUri field above"/>
                <default value="&quot;&quot;"/>
              </arg>
              <arg type="array<integer32>" var="$parameters.properties.customize[].PowerShell.validExitCodes" options="valid-exit-codes">
                <help short="Valid exit codes for the PowerShell script. [Default: 0]"/>
                <item type="integer32"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.customize[].Shell" options="shell">
              <arg type="array<string>" var="$parameters.properties.customize[].Shell.inline" options="inline">
                <help short="Array of shell commands to execute"/>
                <item type="string"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].Shell.scriptUri" options="script-uri">
                <help short="URI of the shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].Shell.sha256Checksum" options="sha256-checksum">
                <help short="SHA256 checksum of the shell script provided in the scriptUri field"/>
                <default value="&quot;&quot;"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.customize[].WindowsRestart" options="windows-restart">
              <arg type="string" var="$parameters.properties.customize[].WindowsRestart.restartCheckCommand" options="restart-check-command">
                <help short="Command to check if restart succeeded [Default: '']"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].WindowsRestart.restartCommand" options="restart-command">
                <help short="Command to execute the restart [Default: 'shutdown /r /f /t 0 /c &quot;packer restart&quot;']"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].WindowsRestart.restartTimeout" options="restart-timeout">
                <help short="Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.customize[].WindowsUpdate" options="windows-update">
              <arg type="array<string>" var="$parameters.properties.customize[].WindowsUpdate.filters" options="filters">
                <help short="Array of filters to select updates to apply. Omit or specify empty array to use the default (no filter). Refer to above link for examples and detailed description of this field."/>
                <item type="string"/>
              </arg>
              <arg type="string" var="$parameters.properties.customize[].WindowsUpdate.searchCriteria" options="search-criteria">
                <help short="Criteria to search updates. Omit or specify empty string to use the default (search all). Refer to above link for examples and detailed description of this field."/>
              </arg>
              <arg type="integer32" var="$parameters.properties.customize[].WindowsUpdate.updateLimit" options="update-limit">
                <help short="Maximum number of updates to apply at a time. Omit or specify 0 to use the default (1000)"/>
                <default value="0"/>
                <format minimum="0"/>
              </arg>
            </arg>
            <arg type="string" var="$parameters.properties.customize[].name" options="name">
              <help short="Friendly Name to provide context on what this customization step does"/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.distribute" options="distribute" group="Properties">
          <help short="The distribution targets where the image output needs to go to."/>
          <item type="object">
            <arg type="object" var="$parameters.properties.distribute[].ManagedImage" options="managed-image">
              <arg type="string" var="$parameters.properties.distribute[].ManagedImage.imageId" options="image-id" required="True">
                <help short="Resource Id of the Managed Disk Image"/>
              </arg>
              <arg type="string" var="$parameters.properties.distribute[].ManagedImage.location" options="location" required="True">
                <help short="Azure location for the image, should match if image already exists"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.distribute[].SharedImage" options="shared-image">
              <arg type="boolean" var="$parameters.properties.distribute[].SharedImage.excludeFromLatest" options="exclude-from-latest">
                <help short="Flag that indicates whether created image version should be excluded from latest. Omit to use the default (false)."/>
                <default value="false"/>
              </arg>
              <arg type="string" var="$parameters.properties.distribute[].SharedImage.galleryImageId" options="gallery-image-id" required="True">
                <help short="Resource Id of the Azure Compute Gallery image"/>
              </arg>
              <arg type="array<string>" var="$parameters.properties.distribute[].SharedImage.replicationRegions" options="replication-regions">
                <help short="[Deprecated] A list of regions that the image will be replicated to. This list can be specified only if targetRegions is not specified. This field is deprecated - use targetRegions instead."/>
                <item type="string"/>
              </arg>
              <arg type="string" var="$parameters.properties.distribute[].SharedImage.storageAccountType" options="storage-account-type">
                <help short="[Deprecated] Storage account type to be used to store the shared image. Omit to use the default (Standard_LRS). This field can be specified only if replicationRegions is specified. This field is deprecated - use targetRegions instead."/>
                <enum>
                  <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                  <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                  <item name="Standard_ZRS" value="&quot;Standard_ZRS&quot;"/>
                </enum>
              </arg>
              <arg type="array<object>" var="$parameters.properties.distribute[].SharedImage.targetRegions" options="target-regions">
                <help short="The target regions where the distributed Image Version is going to be replicated to. This object supersedes replicationRegions and can be specified only if replicationRegions is not specified."/>
                <item type="object">
                  <arg type="string" var="$parameters.properties.distribute[].SharedImage.targetRegions[].name" options="name" required="True">
                    <help short="The name of the region."/>
                  </arg>
                  <arg type="integer32" var="$parameters.properties.distribute[].SharedImage.targetRegions[].replicaCount" options="replica-count">
                    <help short="The number of replicas of the Image Version to be created in this region. Omit to use the default (1)."/>
                    <default value="1"/>
                    <format minimum="1"/>
                  </arg>
                  <arg type="string" var="$parameters.properties.distribute[].SharedImage.targetRegions[].storageAccountType" options="storage-account-type">
                    <help short="Specifies the storage account type to be used to store the image in this region. Omit to use the default (Standard_LRS)."/>
                    <enum>
                      <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                      <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                      <item name="Standard_ZRS" value="&quot;Standard_ZRS&quot;"/>
                    </enum>
                  </arg>
                </item>
              </arg>
              <arg type="object" var="$parameters.properties.distribute[].SharedImage.versioning" options="versioning">
                <help short="Describes how to generate new x.y.z version number for distribution."/>
                <arg type="object" var="$parameters.properties.distribute[].SharedImage.versioning.Latest" options="latest">
                  <arg type="integer32" var="$parameters.properties.distribute[].SharedImage.versioning.Latest.major" options="major">
                    <help short="Major version for the generated version number. Determine what is &quot;latest&quot; based on versions with this value as the major version. -1 is equivalent to leaving it unset."/>
                    <default value="-1"/>
                    <format minimum="-1"/>
                  </arg>
                </arg>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.distribute[].VHD" options="vhd">
              <arg type="string" var="$parameters.properties.distribute[].VHD.uri" options="uri">
                <help short="Optional Azure Storage URI for the distributed VHD blob. Omit to use the default (empty string) in which case VHD would be published to the storage account in the staging resource group."/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.distribute[].artifactTags" options="artifact-tags">
              <help short="Tags that will be applied to the artifact once it has been created/updated by the distributor."/>
              <additionalProp>
                <item type="string"/>
              </additionalProp>
            </arg>
            <arg type="string" var="$parameters.properties.distribute[].runOutputName" options="run-output-name" required="True">
              <help short="The name to be used for the associated RunOutput."/>
              <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
            </arg>
          </item>
        </arg>
        <arg type="object" var="$parameters.properties.optimize" options="optimize" group="Properties">
          <help short="Specifies optimization to be performed on image."/>
          <arg type="object" var="$parameters.properties.optimize.vmBoot" options="vm-boot">
            <help short="Optimization is applied on the image for a faster VM boot."/>
            <arg type="string" var="$parameters.properties.optimize.vmBoot.state" options="state">
              <help short="Enabling this field will improve VM boot time by optimizing the final customized image output."/>
              <enum>
                <item name="Disabled" value="&quot;Disabled&quot;"/>
                <item name="Enabled" value="&quot;Enabled&quot;"/>
              </enum>
            </arg>
          </arg>
        </arg>
        <arg type="object" var="$parameters.properties.source" options="source" group="Properties">
          <help short="Specifies the properties used to describe the source image."/>
          <arg type="object" var="$parameters.properties.source.ManagedImage" options="managed-image">
            <arg type="string" var="$parameters.properties.source.ManagedImage.imageId" options="image-id" required="True">
              <help short="ARM resource id of the managed image in customer subscription"/>
            </arg>
          </arg>
          <arg type="object" var="$parameters.properties.source.PlatformImage" options="platform-image">
            <arg type="string" var="$parameters.properties.source.PlatformImage.offer" options="offer">
              <help short="Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages)."/>
            </arg>
            <arg type="object" var="$parameters.properties.source.PlatformImage.planInfo" options="plan-info">
              <help short="Optional configuration of purchase plan for platform image."/>
              <arg type="string" var="$parameters.properties.source.PlatformImage.planInfo.planName" options="plan-name" required="True">
                <help short="Name of the purchase plan."/>
              </arg>
              <arg type="string" var="$parameters.properties.source.PlatformImage.planInfo.planProduct" options="plan-product" required="True">
                <help short="Product of the purchase plan."/>
              </arg>
              <arg type="string" var="$parameters.properties.source.PlatformImage.planInfo.planPublisher" options="plan-publisher" required="True">
                <help short="Publisher of the purchase plan."/>
              </arg>
            </arg>
            <arg type="string" var="$parameters.properties.source.PlatformImage.publisher" options="publisher">
              <help short="Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages)."/>
            </arg>
            <arg type="string" var="$parameters.properties.source.PlatformImage.sku" options="sku">
              <help short="Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages)."/>
            </arg>
            <arg type="string" var="$parameters.properties.source.PlatformImage.version" options="version">
              <help short="Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). If 'latest' is specified here, the version is evaluated when the image build takes place, not when the template is submitted."/>
            </arg>
          </arg>
          <arg type="object" var="$parameters.properties.source.SharedImageVersion" options="shared-image-version">
            <arg type="string" var="$parameters.properties.source.SharedImageVersion.imageVersionId" options="image-version-id" required="True">
              <help short="ARM resource id of the image version. When image version name is 'latest', the version is evaluated when the image build takes place."/>
            </arg>
          </arg>
        </arg>
        <arg type="string" var="$parameters.properties.stagingResourceGroup" options="staging-resource-group" group="Properties">
          <help short="The staging resource group id in the same subscription as the image template that will be used to build the image. If this field is empty, a resource group with a random name will be created. If the resource group specified in this field doesn't exist, it will be created with the same name. If the resource group specified exists, it must be empty and in the same region as the image template. The resource group created will be deleted during template deletion if this field is empty or the resource group specified doesn't exist, but if the resource group specified exists the resources created in the resource group will be deleted during template deletion and the resource group itself will remain."/>
        </arg>
        <arg type="object" var="$parameters.properties.validate" options="validate" group="Properties">
          <help short="Configuration options and list of validations to be performed on the resulting image."/>
          <arg type="boolean" var="$parameters.properties.validate.continueDistributeOnFailure" options="continue-distribute-on-failure">
            <help short="If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior. If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]"/>
            <default value="false"/>
          </arg>
          <arg type="array<object>" var="$parameters.properties.validate.inVMValidations" options="in-vm-validations">
            <help short="List of validations to be performed."/>
            <item type="object">
              <arg type="object" var="$parameters.properties.validate.inVMValidations[].File" options="file">
                <arg type="string" var="$parameters.properties.validate.inVMValidations[].File.destination" options="destination">
                  <help short="The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM"/>
                </arg>
                <arg type="string" var="$parameters.properties.validate.inVMValidations[].File.sha256Checksum" options="sha256-checksum">
                  <help short="SHA256 checksum of the file provided in the sourceUri field above"/>
                  <default value="&quot;&quot;"/>
                </arg>
                <arg type="string" var="$parameters.properties.validate.inVMValidations[].File.sourceUri" options="source-uri">
                  <help short="The URI of the file to be uploaded to the VM for validation. It can be a github link, Azure Storage URI (authorized or SAS), etc"/>
                </arg>
              </arg>
              <arg type="object" var="$parameters.properties.validate.inVMValidations[].PowerShell" options="power-shell">
                <arg type="array<string>" var="$parameters.properties.validate.inVMValidations[].PowerShell.inline" options="inline">
                  <help short="Array of PowerShell commands to execute"/>
                  <item type="string"/>
                </arg>
                <arg type="boolean" var="$parameters.properties.validate.inVMValidations[].PowerShell.runAsSystem" options="run-as-system">
                  <help short="If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true."/>
                  <default value="false"/>
                </arg>
                <arg type="boolean" var="$parameters.properties.validate.inVMValidations[].PowerShell.runElevated" options="run-elevated">
                  <help short="If specified, the PowerShell script will be run with elevated privileges"/>
                  <default value="false"/>
                </arg>
                <arg type="string" var="$parameters.properties.validate.inVMValidations[].PowerShell.scriptUri" options="script-uri">
                  <help short="URI of the PowerShell script to be run for validation. It can be a github link, Azure Storage URI, etc"/>
                </arg>
                <arg type="string" var="$parameters.properties.validate.inVMValidations[].PowerShell.sha256Checksum" options="sha256-checksum">
                  <help short="SHA256 checksum of the power shell script provided in the scriptUri field above"/>
                  <default value="&quot;&quot;"/>
                </arg>
                <arg type="array<integer32>" var="$parameters.properties.validate.inVMValidations[].PowerShell.validExitCodes" options="valid-exit-codes">
                  <help short="Valid exit codes for the PowerShell script. [Default: 0]"/>
                  <item type="integer32"/>
                </arg>
              </arg>
              <arg type="object" var="$parameters.properties.validate.inVMValidations[].Shell" options="shell">
                <arg type="array<string>" var="$parameters.properties.validate.inVMValidations[].Shell.inline" options="inline">
                  <help short="Array of shell commands to execute"/>
                  <item type="string"/>
                </arg>
                <arg type="string" var="$parameters.properties.validate.inVMValidations[].Shell.scriptUri" options="script-uri">
                  <help short="URI of the shell script to be run for validation. It can be a github link, Azure Storage URI, etc"/>
                </arg>
                <arg type="string" var="$parameters.properties.validate.inVMValidations[].Shell.sha256Checksum" options="sha256-checksum">
                  <help short="SHA256 checksum of the shell script provided in the scriptUri field"/>
                  <default value="&quot;&quot;"/>
                </arg>
              </arg>
              <arg type="string" var="$parameters.properties.validate.inVMValidations[].name" options="name">
                <help short="Friendly Name to provide context on what this validation step does"/>
              </arg>
            </item>
          </arg>
          <arg type="boolean" var="$parameters.properties.validate.sourceValidationOnly" options="source-validation-only">
            <help short="If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build will be run to generate and then validate a customized image."/>
            <default value="false"/>
          </arg>
        </arg>
        <arg type="object" var="$parameters.properties.vmProfile" options="vm-profile" group="Properties">
          <help short="Describes how virtual machine is set up to build images"/>
          <arg type="integer32" var="$parameters.properties.vmProfile.osDiskSizeGB" options="os-disk-size-gb">
            <help short="Size of the OS disk in GB. Omit or specify 0 to use Azure's default OS disk size."/>
            <default value="0"/>
            <format minimum="0"/>
          </arg>
          <arg type="array<string>" var="$parameters.properties.vmProfile.userAssignedIdentities" options="user-assigned-identities">
            <help short="Optional array of resource IDs of user assigned managed identities to be configured on the build VM and validation VM. This may include the identity of the image template."/>
            <item type="string"/>
          </arg>
          <arg type="string" var="$parameters.properties.vmProfile.vmSize" options="vm-size">
            <help short="Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default (Standard_D1_v2 for Gen1 images and Standard_D2ds_v4 for Gen2 images)."/>
            <default value="&quot;&quot;"/>
          </arg>
          <arg type="object" var="$parameters.properties.vmProfile.vnetConfig" options="vnet-config">
            <help short="Optional configuration of the virtual network to use to deploy the build VM and validation VM in. Omit if no specific virtual network needs to be used."/>
            <arg type="string" var="$parameters.properties.vmProfile.vnetConfig.proxyVmSize" options="proxy-vm-size">
              <help short="Size of the proxy virtual machine used to pass traffic to the build VM and validation VM. Omit or specify empty string to use the default (Standard_A1_v2)."/>
              <default value="&quot;&quot;"/>
            </arg>
            <arg type="string" var="$parameters.properties.vmProfile.vnetConfig.subnetId" options="subnet-id">
              <help short="Resource id of a pre-existing subnet."/>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="VirtualMachineImageTemplates_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
          <request method="put">
            <path>
              <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01&quot;"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="parameters" required="True" clientFlatten="True">
                  <prop type="IdentityObject" name="identity" arg="$parameters.identity" required="True">
                    <prop type="string" name="type" arg="$parameters.identity.type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                      <additionalProp>
                        <item type="object"/>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" arg="$parameters.location" required="True"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="integer32" name="buildTimeoutInMinutes" arg="$parameters.properties.buildTimeoutInMinutes">
                      <default value="0"/>
                      <format maximum="960" minimum="0"/>
                    </prop>
                    <prop type="array<object>" name="customize" arg="$parameters.properties.customize">
                      <item type="object">
                        <prop type="string" name="name" arg="$parameters.properties.customize[].name"/>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item arg="$parameters.properties.customize[].File" value="&quot;File&quot;"/>
                            <item arg="$parameters.properties.customize[].PowerShell" value="&quot;PowerShell&quot;"/>
                            <item arg="$parameters.properties.customize[].Shell" value="&quot;Shell&quot;"/>
                            <item arg="$parameters.properties.customize[].WindowsRestart" value="&quot;WindowsRestart&quot;"/>
                            <item arg="$parameters.properties.customize[].WindowsUpdate" value="&quot;WindowsUpdate&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="File">
                          <prop type="string" name="destination" arg="$parameters.properties.customize[].File.destination"/>
                          <prop type="string" name="sha256Checksum" arg="$parameters.properties.customize[].File.sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="string" name="sourceUri" arg="$parameters.properties.customize[].File.sourceUri"/>
                        </discriminator>
                        <discriminator property="type" value="PowerShell">
                          <prop type="array<string>" name="inline" arg="$parameters.properties.customize[].PowerShell.inline">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="runAsSystem" arg="$parameters.properties.customize[].PowerShell.runAsSystem">
                            <default value="false"/>
                          </prop>
                          <prop type="boolean" name="runElevated" arg="$parameters.properties.customize[].PowerShell.runElevated">
                            <default value="false"/>
                          </prop>
                          <prop type="string" name="scriptUri" arg="$parameters.properties.customize[].PowerShell.scriptUri"/>
                          <prop type="string" name="sha256Checksum" arg="$parameters.properties.customize[].PowerShell.sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="array<integer32>" name="validExitCodes" arg="$parameters.properties.customize[].PowerShell.validExitCodes">
                            <item type="integer32"/>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="Shell">
                          <prop type="array<string>" name="inline" arg="$parameters.properties.customize[].Shell.inline">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="scriptUri" arg="$parameters.properties.customize[].Shell.scriptUri"/>
                          <prop type="string" name="sha256Checksum" arg="$parameters.properties.customize[].Shell.sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="WindowsRestart">
                          <prop type="string" name="restartCheckCommand" arg="$parameters.properties.customize[].WindowsRestart.restartCheckCommand"/>
                          <prop type="string" name="restartCommand" arg="$parameters.properties.customize[].WindowsRestart.restartCommand"/>
                          <prop type="string" name="restartTimeout" arg="$parameters.properties.customize[].WindowsRestart.restartTimeout"/>
                        </discriminator>
                        <discriminator property="type" value="WindowsUpdate">
                          <prop type="array<string>" name="filters" arg="$parameters.properties.customize[].WindowsUpdate.filters">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="searchCriteria" arg="$parameters.properties.customize[].WindowsUpdate.searchCriteria"/>
                          <prop type="integer32" name="updateLimit" arg="$parameters.properties.customize[].WindowsUpdate.updateLimit">
                            <default value="0"/>
                            <format minimum="0"/>
                          </prop>
                        </discriminator>
                      </item>
                    </prop>
                    <prop type="array<object>" name="distribute" arg="$parameters.properties.distribute" required="True">
                      <item type="object">
                        <prop type="object" name="artifactTags" arg="$parameters.properties.distribute[].artifactTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="runOutputName" arg="$parameters.properties.distribute[].runOutputName" required="True">
                          <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                        </prop>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item arg="$parameters.properties.distribute[].ManagedImage" value="&quot;ManagedImage&quot;"/>
                            <item arg="$parameters.properties.distribute[].SharedImage" value="&quot;SharedImage&quot;"/>
                            <item arg="$parameters.properties.distribute[].VHD" value="&quot;VHD&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="ManagedImage">
                          <prop type="string" name="imageId" arg="$parameters.properties.distribute[].ManagedImage.imageId" required="True"/>
                          <prop type="string" name="location" arg="$parameters.properties.distribute[].ManagedImage.location" required="True"/>
                        </discriminator>
                        <discriminator property="type" value="SharedImage">
                          <prop type="boolean" name="excludeFromLatest" arg="$parameters.properties.distribute[].SharedImage.excludeFromLatest">
                            <default value="false"/>
                          </prop>
                          <prop type="string" name="galleryImageId" arg="$parameters.properties.distribute[].SharedImage.galleryImageId" required="True"/>
                          <prop type="array<string>" name="replicationRegions" arg="$parameters.properties.distribute[].SharedImage.replicationRegions">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="storageAccountType" arg="$parameters.properties.distribute[].SharedImage.storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                              <item value="&quot;Standard_ZRS&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<object>" name="targetRegions" arg="$parameters.properties.distribute[].SharedImage.targetRegions">
                            <item type="object">
                              <prop type="string" name="name" arg="$parameters.properties.distribute[].SharedImage.targetRegions[].name" required="True"/>
                              <prop type="integer32" name="replicaCount" arg="$parameters.properties.distribute[].SharedImage.targetRegions[].replicaCount">
                                <default value="1"/>
                                <format minimum="1"/>
                              </prop>
                              <prop type="string" name="storageAccountType" arg="$parameters.properties.distribute[].SharedImage.targetRegions[].storageAccountType">
                                <enum>
                                  <item value="&quot;Premium_LRS&quot;"/>
                                  <item value="&quot;Standard_LRS&quot;"/>
                                  <item value="&quot;Standard_ZRS&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                          <prop type="object" name="versioning" arg="$parameters.properties.distribute[].SharedImage.versioning">
                            <prop type="string" name="scheme" required="True">
                              <enum>
                                <item arg="$parameters.properties.distribute[].SharedImage.versioning.Latest" value="&quot;Latest&quot;"/>
                                <item value="&quot;Source&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="scheme" value="Latest">
                              <prop type="integer32" name="major" arg="$parameters.properties.distribute[].SharedImage.versioning.Latest.major">
                                <default value="-1"/>
                                <format minimum="-1"/>
                              </prop>
                            </discriminator>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="VHD">
                          <prop type="string" name="uri" arg="$parameters.properties.distribute[].VHD.uri"/>
                        </discriminator>
                      </item>
                    </prop>
                    <prop type="object" name="optimize" arg="$parameters.properties.optimize">
                      <prop type="object" name="vmBoot" arg="$parameters.properties.optimize.vmBoot">
                        <prop type="string" name="state" arg="$parameters.properties.optimize.vmBoot.state">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="source" arg="$parameters.properties.source" required="True">
                      <prop type="string" name="type" required="True">
                        <enum>
                          <item arg="$parameters.properties.source.ManagedImage" value="&quot;ManagedImage&quot;"/>
                          <item arg="$parameters.properties.source.PlatformImage" value="&quot;PlatformImage&quot;"/>
                          <item arg="$parameters.properties.source.SharedImageVersion" value="&quot;SharedImageVersion&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="type" value="ManagedImage">
                        <prop type="string" name="imageId" arg="$parameters.properties.source.ManagedImage.imageId" required="True"/>
                      </discriminator>
                      <discriminator property="type" value="PlatformImage">
                        <prop type="string" name="offer" arg="$parameters.properties.source.PlatformImage.offer"/>
                        <prop type="object" name="planInfo" arg="$parameters.properties.source.PlatformImage.planInfo">
                          <prop type="string" name="planName" arg="$parameters.properties.source.PlatformImage.planInfo.planName" required="True"/>
                          <prop type="string" name="planProduct" arg="$parameters.properties.source.PlatformImage.planInfo.planProduct" required="True"/>
                          <prop type="string" name="planPublisher" arg="$parameters.properties.source.PlatformImage.planInfo.planPublisher" required="True"/>
                        </prop>
                        <prop type="string" name="publisher" arg="$parameters.properties.source.PlatformImage.publisher"/>
                        <prop type="string" name="sku" arg="$parameters.properties.source.PlatformImage.sku"/>
                        <prop type="string" name="version" arg="$parameters.properties.source.PlatformImage.version"/>
                      </discriminator>
                      <discriminator property="type" value="SharedImageVersion">
                        <prop type="string" name="imageVersionId" arg="$parameters.properties.source.SharedImageVersion.imageVersionId" required="True"/>
                      </discriminator>
                    </prop>
                    <prop type="string" name="stagingResourceGroup" arg="$parameters.properties.stagingResourceGroup"/>
                    <prop type="object" name="validate" arg="$parameters.properties.validate">
                      <prop type="boolean" name="continueDistributeOnFailure" arg="$parameters.properties.validate.continueDistributeOnFailure">
                        <default value="false"/>
                      </prop>
                      <prop type="array<object>" name="inVMValidations" arg="$parameters.properties.validate.inVMValidations">
                        <item type="object">
                          <prop type="string" name="name" arg="$parameters.properties.validate.inVMValidations[].name"/>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item arg="$parameters.properties.validate.inVMValidations[].File" value="&quot;File&quot;"/>
                              <item arg="$parameters.properties.validate.inVMValidations[].PowerShell" value="&quot;PowerShell&quot;"/>
                              <item arg="$parameters.properties.validate.inVMValidations[].Shell" value="&quot;Shell&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="File">
                            <prop type="string" name="destination" arg="$parameters.properties.validate.inVMValidations[].File.destination"/>
                            <prop type="string" name="sha256Checksum" arg="$parameters.properties.validate.inVMValidations[].File.sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="string" name="sourceUri" arg="$parameters.properties.validate.inVMValidations[].File.sourceUri"/>
                          </discriminator>
                          <discriminator property="type" value="PowerShell">
                            <prop type="array<string>" name="inline" arg="$parameters.properties.validate.inVMValidations[].PowerShell.inline">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="runAsSystem" arg="$parameters.properties.validate.inVMValidations[].PowerShell.runAsSystem">
                              <default value="false"/>
                            </prop>
                            <prop type="boolean" name="runElevated" arg="$parameters.properties.validate.inVMValidations[].PowerShell.runElevated">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="scriptUri" arg="$parameters.properties.validate.inVMValidations[].PowerShell.scriptUri"/>
                            <prop type="string" name="sha256Checksum" arg="$parameters.properties.validate.inVMValidations[].PowerShell.sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="array<integer32>" name="validExitCodes" arg="$parameters.properties.validate.inVMValidations[].PowerShell.validExitCodes">
                              <item type="integer32"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="Shell">
                            <prop type="array<string>" name="inline" arg="$parameters.properties.validate.inVMValidations[].Shell.inline">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="scriptUri" arg="$parameters.properties.validate.inVMValidations[].Shell.scriptUri"/>
                            <prop type="string" name="sha256Checksum" arg="$parameters.properties.validate.inVMValidations[].Shell.sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="boolean" name="sourceValidationOnly" arg="$parameters.properties.validate.sourceValidationOnly">
                        <default value="false"/>
                      </prop>
                    </prop>
                    <prop type="object" name="vmProfile" arg="$parameters.properties.vmProfile">
                      <prop type="integer32" name="osDiskSizeGB" arg="$parameters.properties.vmProfile.osDiskSizeGB">
                        <default value="0"/>
                        <format minimum="0"/>
                      </prop>
                      <prop type="array<string>" name="userAssignedIdentities" arg="$parameters.properties.vmProfile.userAssignedIdentities">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="vmSize" arg="$parameters.properties.vmProfile.vmSize">
                        <default value="&quot;&quot;"/>
                      </prop>
                      <prop type="object" name="vnetConfig" arg="$parameters.properties.vmProfile.vnetConfig">
                        <prop type="string" name="proxyVmSize" arg="$parameters.properties.vmProfile.vnetConfig.proxyVmSize">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="string" name="subnetId" arg="$parameters.properties.vmProfile.vnetConfig.subnetId"/>
                      </prop>
                    </prop>
                  </prop>
                  <prop type="object" name="tags" arg="$parameters.tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.VirtualMachineImages/imageTemplates/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity" required="True">
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="integer32" name="buildTimeoutInMinutes">
                      <default value="0"/>
                      <format maximum="960" minimum="0"/>
                    </prop>
                    <prop type="array<object>" name="customize">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;File&quot;"/>
                            <item value="&quot;PowerShell&quot;"/>
                            <item value="&quot;Shell&quot;"/>
                            <item value="&quot;WindowsRestart&quot;"/>
                            <item value="&quot;WindowsUpdate&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="File">
                          <prop type="string" name="destination"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="string" name="sourceUri"/>
                        </discriminator>
                        <discriminator property="type" value="PowerShell">
                          <prop type="array<string>" name="inline">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="runAsSystem">
                            <default value="false"/>
                          </prop>
                          <prop type="boolean" name="runElevated">
                            <default value="false"/>
                          </prop>
                          <prop type="string" name="scriptUri"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="array<integer32>" name="validExitCodes">
                            <item type="integer32"/>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="Shell">
                          <prop type="array<string>" name="inline">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="scriptUri"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="WindowsRestart">
                          <prop type="string" name="restartCheckCommand"/>
                          <prop type="string" name="restartCommand"/>
                          <prop type="string" name="restartTimeout"/>
                        </discriminator>
                        <discriminator property="type" value="WindowsUpdate">
                          <prop type="array<string>" name="filters">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="searchCriteria"/>
                          <prop type="integer32" name="updateLimit">
                            <default value="0"/>
                            <format minimum="0"/>
                          </prop>
                        </discriminator>
                      </item>
                    </prop>
                    <prop type="array<object>" name="distribute" required="True">
                      <item type="object">
                        <prop type="object" name="artifactTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="runOutputName" required="True">
                          <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                        </prop>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;ManagedImage&quot;"/>
                            <item value="&quot;SharedImage&quot;"/>
                            <item value="&quot;VHD&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="ManagedImage">
                          <prop type="string" name="imageId" required="True"/>
                          <prop type="string" name="location" required="True"/>
                        </discriminator>
                        <discriminator property="type" value="SharedImage">
                          <prop type="boolean" name="excludeFromLatest">
                            <default value="false"/>
                          </prop>
                          <prop type="string" name="galleryImageId" required="True"/>
                          <prop type="array<string>" name="replicationRegions">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                              <item value="&quot;Standard_ZRS&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<object>" name="targetRegions">
                            <item type="object">
                              <prop type="string" name="name" required="True"/>
                              <prop type="integer32" name="replicaCount">
                                <default value="1"/>
                                <format minimum="1"/>
                              </prop>
                              <prop type="string" name="storageAccountType">
                                <enum>
                                  <item value="&quot;Premium_LRS&quot;"/>
                                  <item value="&quot;Standard_LRS&quot;"/>
                                  <item value="&quot;Standard_ZRS&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                          <prop type="object" name="versioning">
                            <prop type="string" name="scheme" required="True">
                              <enum>
                                <item value="&quot;Latest&quot;"/>
                                <item value="&quot;Source&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="scheme" value="Latest">
                              <prop type="integer32" name="major">
                                <default value="-1"/>
                                <format minimum="-1"/>
                              </prop>
                            </discriminator>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="VHD">
                          <prop type="string" name="uri"/>
                        </discriminator>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="exactStagingResourceGroup"/>
                    <prop type="object" name="lastRunStatus">
                      <prop type="dateTime" name="endTime"/>
                      <prop type="string" name="message"/>
                      <prop type="string" name="runState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Canceling&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;PartiallySucceeded&quot;"/>
                          <item value="&quot;Running&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="runSubState">
                        <enum>
                          <item value="&quot;Building&quot;"/>
                          <item value="&quot;Customizing&quot;"/>
                          <item value="&quot;Distributing&quot;"/>
                          <item value="&quot;Optimizing&quot;"/>
                          <item value="&quot;Queued&quot;"/>
                          <item value="&quot;Validating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="startTime"/>
                    </prop>
                    <prop type="object" name="optimize">
                      <prop type="object" name="vmBoot">
                        <prop type="string" name="state">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="provisioningError">
                      <prop type="string" name="message"/>
                      <prop type="string" name="provisioningErrorCode">
                        <enum>
                          <item value="&quot;BadCustomizerType&quot;"/>
                          <item value="&quot;BadDistributeType&quot;"/>
                          <item value="&quot;BadManagedImageSource&quot;"/>
                          <item value="&quot;BadPIRSource&quot;"/>
                          <item value="&quot;BadSharedImageDistribute&quot;"/>
                          <item value="&quot;BadSharedImageVersionSource&quot;"/>
                          <item value="&quot;BadSourceType&quot;"/>
                          <item value="&quot;BadStagingResourceGroup&quot;"/>
                          <item value="&quot;BadValidatorType&quot;"/>
                          <item value="&quot;NoCustomizerScript&quot;"/>
                          <item value="&quot;NoValidatorScript&quot;"/>
                          <item value="&quot;Other&quot;"/>
                          <item value="&quot;ServerError&quot;"/>
                          <item value="&quot;UnsupportedCustomizerType&quot;"/>
                          <item value="&quot;UnsupportedValidatorType&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="source" required="True">
                      <prop type="string" name="type" required="True">
                        <enum>
                          <item value="&quot;ManagedImage&quot;"/>
                          <item value="&quot;PlatformImage&quot;"/>
                          <item value="&quot;SharedImageVersion&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="type" value="ManagedImage">
                        <prop type="string" name="imageId" required="True"/>
                      </discriminator>
                      <discriminator property="type" value="PlatformImage">
                        <prop readOnly="True" type="string" name="exactVersion"/>
                        <prop type="string" name="offer"/>
                        <prop type="object" name="planInfo">
                          <prop type="string" name="planName" required="True"/>
                          <prop type="string" name="planProduct" required="True"/>
                          <prop type="string" name="planPublisher" required="True"/>
                        </prop>
                        <prop type="string" name="publisher"/>
                        <prop type="string" name="sku"/>
                        <prop type="string" name="version"/>
                      </discriminator>
                      <discriminator property="type" value="SharedImageVersion">
                        <prop readOnly="True" type="string" name="exactVersion"/>
                        <prop type="string" name="imageVersionId" required="True"/>
                      </discriminator>
                    </prop>
                    <prop type="string" name="stagingResourceGroup"/>
                    <prop type="object" name="validate">
                      <prop type="boolean" name="continueDistributeOnFailure">
                        <default value="false"/>
                      </prop>
                      <prop type="array<object>" name="inVMValidations">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;File&quot;"/>
                              <item value="&quot;PowerShell&quot;"/>
                              <item value="&quot;Shell&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="File">
                            <prop type="string" name="destination"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="string" name="sourceUri"/>
                          </discriminator>
                          <discriminator property="type" value="PowerShell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="runAsSystem">
                              <default value="false"/>
                            </prop>
                            <prop type="boolean" name="runElevated">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="array<integer32>" name="validExitCodes">
                              <item type="integer32"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="Shell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="boolean" name="sourceValidationOnly">
                        <default value="false"/>
                      </prop>
                    </prop>
                    <prop type="object" name="vmProfile">
                      <prop type="integer32" name="osDiskSizeGB">
                        <default value="0"/>
                        <format minimum="0"/>
                      </prop>
                      <prop type="array<string>" name="userAssignedIdentities">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="vmSize">
                        <default value="&quot;&quot;"/>
                      </prop>
                      <prop type="object" name="vnetConfig">
                        <prop type="string" name="proxyVmSize">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="string" name="subnetId"/>
                      </prop>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <command name="update" version="2022-07-01">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
      <argGroup name="">
        <arg type="string" var="$Path.imageTemplateName" options="image-template-name name n" required="True" idPart="name">
          <help short="The name of the image Template"/>
          <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Parameters">
        <arg type="object" var="$parameters.identity" options="identity" group="Parameters">
          <help short="The identity of the image template, if configured."/>
          <arg nullable="True" type="string" var="$parameters.identity.type" options="type">
            <help short="The type of identity used for the image template. The type 'None' will remove any identities from the image template."/>
            <enum>
              <item name="None" value="&quot;None&quot;"/>
              <item name="UserAssigned" value="&quot;UserAssigned&quot;"/>
            </enum>
          </arg>
          <arg nullable="True" type="object" var="$parameters.identity.userAssignedIdentities" options="user-assigned-identities">
            <help short="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests."/>
            <additionalProp>
              <item nullable="True" type="object">
                <blank value="{}"/>
              </item>
            </additionalProp>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$parameters.tags" options="tags" group="Parameters">
          <help short="Resource tags."/>
          <additionalProp>
            <item nullable="True" type="string"/>
          </additionalProp>
        </arg>
      </argGroup>
      <argGroup name="Properties">
        <arg nullable="True" type="integer32" var="$parameters.properties.buildTimeoutInMinutes" options="build-timeout-in-minutes" group="Properties">
          <help short="Maximum duration to wait while building the image template (includes all customizations, optimization, validations, and distributions). Omit or specify 0 to use the default (4 hours)."/>
          <format maximum="960" minimum="0"/>
        </arg>
        <arg nullable="True" type="array<object>" var="$parameters.properties.customize" options="customize" group="Properties">
          <help short="Specifies the properties used to describe the customization steps of the image, like Image source etc"/>
          <item nullable="True" type="object">
            <arg type="object" var="$parameters.properties.customize[].File" options="file">
              <arg nullable="True" type="string" var="$parameters.properties.customize[].File.destination" options="destination">
                <help short="The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].File.sha256Checksum" options="sha256-checksum">
                <help short="SHA256 checksum of the file provided in the sourceUri field above"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].File.sourceUri" options="source-uri">
                <help short="The URI of the file to be uploaded for customizing the VM. It can be a github link, SAS URI for Azure Storage, etc"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.customize[].PowerShell" options="power-shell">
              <arg nullable="True" type="array<string>" var="$parameters.properties.customize[].PowerShell.inline" options="inline">
                <help short="Array of PowerShell commands to execute"/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="boolean" var="$parameters.properties.customize[].PowerShell.runAsSystem" options="run-as-system">
                <help short="If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true."/>
              </arg>
              <arg nullable="True" type="boolean" var="$parameters.properties.customize[].PowerShell.runElevated" options="run-elevated">
                <help short="If specified, the PowerShell script will be run with elevated privileges"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].PowerShell.scriptUri" options="script-uri">
                <help short="URI of the PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].PowerShell.sha256Checksum" options="sha256-checksum">
                <help short="SHA256 checksum of the power shell script provided in the scriptUri field above"/>
              </arg>
              <arg nullable="True" type="array<integer32>" var="$parameters.properties.customize[].PowerShell.validExitCodes" options="valid-exit-codes">
                <help short="Valid exit codes for the PowerShell script. [Default: 0]"/>
                <item nullable="True" type="integer32"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.customize[].Shell" options="shell">
              <arg nullable="True" type="array<string>" var="$parameters.properties.customize[].Shell.inline" options="inline">
                <help short="Array of shell commands to execute"/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].Shell.scriptUri" options="script-uri">
                <help short="URI of the shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].Shell.sha256Checksum" options="sha256-checksum">
                <help short="SHA256 checksum of the shell script provided in the scriptUri field"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.customize[].WindowsRestart" options="windows-restart">
              <arg nullable="True" type="string" var="$parameters.properties.customize[].WindowsRestart.restartCheckCommand" options="restart-check-command">
                <help short="Command to check if restart succeeded [Default: '']"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].WindowsRestart.restartCommand" options="restart-command">
                <help short="Command to execute the restart [Default: 'shutdown /r /f /t 0 /c &quot;packer restart&quot;']"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].WindowsRestart.restartTimeout" options="restart-timeout">
                <help short="Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.customize[].WindowsUpdate" options="windows-update">
              <arg nullable="True" type="array<string>" var="$parameters.properties.customize[].WindowsUpdate.filters" options="filters">
                <help short="Array of filters to select updates to apply. Omit or specify empty array to use the default (no filter). Refer to above link for examples and detailed description of this field."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.customize[].WindowsUpdate.searchCriteria" options="search-criteria">
                <help short="Criteria to search updates. Omit or specify empty string to use the default (search all). Refer to above link for examples and detailed description of this field."/>
              </arg>
              <arg nullable="True" type="integer32" var="$parameters.properties.customize[].WindowsUpdate.updateLimit" options="update-limit">
                <help short="Maximum number of updates to apply at a time. Omit or specify 0 to use the default (1000)"/>
                <format minimum="0"/>
              </arg>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.customize[].name" options="name">
              <help short="Friendly Name to provide context on what this customization step does"/>
            </arg>
          </item>
        </arg>
        <arg type="array<object>" var="$parameters.properties.distribute" options="distribute" group="Properties">
          <help short="The distribution targets where the image output needs to go to."/>
          <item nullable="True" type="object">
            <arg type="object" var="$parameters.properties.distribute[].ManagedImage" options="managed-image">
              <arg type="string" var="$parameters.properties.distribute[].ManagedImage.imageId" options="image-id">
                <help short="Resource Id of the Managed Disk Image"/>
              </arg>
              <arg type="string" var="$parameters.properties.distribute[].ManagedImage.location" options="location">
                <help short="Azure location for the image, should match if image already exists"/>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.distribute[].SharedImage" options="shared-image">
              <arg nullable="True" type="boolean" var="$parameters.properties.distribute[].SharedImage.excludeFromLatest" options="exclude-from-latest">
                <help short="Flag that indicates whether created image version should be excluded from latest. Omit to use the default (false)."/>
              </arg>
              <arg type="string" var="$parameters.properties.distribute[].SharedImage.galleryImageId" options="gallery-image-id">
                <help short="Resource Id of the Azure Compute Gallery image"/>
              </arg>
              <arg nullable="True" type="array<string>" var="$parameters.properties.distribute[].SharedImage.replicationRegions" options="replication-regions">
                <help short="[Deprecated] A list of regions that the image will be replicated to. This list can be specified only if targetRegions is not specified. This field is deprecated - use targetRegions instead."/>
                <item nullable="True" type="string"/>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.distribute[].SharedImage.storageAccountType" options="storage-account-type">
                <help short="[Deprecated] Storage account type to be used to store the shared image. Omit to use the default (Standard_LRS). This field can be specified only if replicationRegions is specified. This field is deprecated - use targetRegions instead."/>
                <enum>
                  <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                  <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                  <item name="Standard_ZRS" value="&quot;Standard_ZRS&quot;"/>
                </enum>
              </arg>
              <arg nullable="True" type="array<object>" var="$parameters.properties.distribute[].SharedImage.targetRegions" options="target-regions">
                <help short="The target regions where the distributed Image Version is going to be replicated to. This object supersedes replicationRegions and can be specified only if replicationRegions is not specified."/>
                <item nullable="True" type="object">
                  <arg type="string" var="$parameters.properties.distribute[].SharedImage.targetRegions[].name" options="name">
                    <help short="The name of the region."/>
                  </arg>
                  <arg nullable="True" type="integer32" var="$parameters.properties.distribute[].SharedImage.targetRegions[].replicaCount" options="replica-count">
                    <help short="The number of replicas of the Image Version to be created in this region. Omit to use the default (1)."/>
                    <format minimum="1"/>
                  </arg>
                  <arg nullable="True" type="string" var="$parameters.properties.distribute[].SharedImage.targetRegions[].storageAccountType" options="storage-account-type">
                    <help short="Specifies the storage account type to be used to store the image in this region. Omit to use the default (Standard_LRS)."/>
                    <enum>
                      <item name="Premium_LRS" value="&quot;Premium_LRS&quot;"/>
                      <item name="Standard_LRS" value="&quot;Standard_LRS&quot;"/>
                      <item name="Standard_ZRS" value="&quot;Standard_ZRS&quot;"/>
                    </enum>
                  </arg>
                </item>
              </arg>
              <arg nullable="True" type="object" var="$parameters.properties.distribute[].SharedImage.versioning" options="versioning">
                <help short="Describes how to generate new x.y.z version number for distribution."/>
                <arg type="object" var="$parameters.properties.distribute[].SharedImage.versioning.Latest" options="latest">
                  <arg nullable="True" type="integer32" var="$parameters.properties.distribute[].SharedImage.versioning.Latest.major" options="major">
                    <help short="Major version for the generated version number. Determine what is &quot;latest&quot; based on versions with this value as the major version. -1 is equivalent to leaving it unset."/>
                    <format minimum="-1"/>
                  </arg>
                </arg>
              </arg>
            </arg>
            <arg type="object" var="$parameters.properties.distribute[].VHD" options="vhd">
              <arg nullable="True" type="string" var="$parameters.properties.distribute[].VHD.uri" options="uri">
                <help short="Optional Azure Storage URI for the distributed VHD blob. Omit to use the default (empty string) in which case VHD would be published to the storage account in the staging resource group."/>
              </arg>
            </arg>
            <arg nullable="True" type="object" var="$parameters.properties.distribute[].artifactTags" options="artifact-tags">
              <help short="Tags that will be applied to the artifact once it has been created/updated by the distributor."/>
              <additionalProp>
                <item nullable="True" type="string"/>
              </additionalProp>
            </arg>
            <arg type="string" var="$parameters.properties.distribute[].runOutputName" options="run-output-name">
              <help short="The name to be used for the associated RunOutput."/>
              <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
            </arg>
          </item>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.optimize" options="optimize" group="Properties">
          <help short="Specifies optimization to be performed on image."/>
          <arg nullable="True" type="object" var="$parameters.properties.optimize.vmBoot" options="vm-boot">
            <help short="Optimization is applied on the image for a faster VM boot."/>
            <arg nullable="True" type="string" var="$parameters.properties.optimize.vmBoot.state" options="state">
              <help short="Enabling this field will improve VM boot time by optimizing the final customized image output."/>
              <enum>
                <item name="Disabled" value="&quot;Disabled&quot;"/>
                <item name="Enabled" value="&quot;Enabled&quot;"/>
              </enum>
            </arg>
          </arg>
        </arg>
        <arg type="object" var="$parameters.properties.source" options="source" group="Properties">
          <help short="Specifies the properties used to describe the source image."/>
          <arg type="object" var="$parameters.properties.source.ManagedImage" options="managed-image">
            <arg type="string" var="$parameters.properties.source.ManagedImage.imageId" options="image-id">
              <help short="ARM resource id of the managed image in customer subscription"/>
            </arg>
          </arg>
          <arg type="object" var="$parameters.properties.source.PlatformImage" options="platform-image">
            <arg nullable="True" type="string" var="$parameters.properties.source.PlatformImage.offer" options="offer">
              <help short="Image offer from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages)."/>
            </arg>
            <arg nullable="True" type="object" var="$parameters.properties.source.PlatformImage.planInfo" options="plan-info">
              <help short="Optional configuration of purchase plan for platform image."/>
              <arg type="string" var="$parameters.properties.source.PlatformImage.planInfo.planName" options="plan-name">
                <help short="Name of the purchase plan."/>
              </arg>
              <arg type="string" var="$parameters.properties.source.PlatformImage.planInfo.planProduct" options="plan-product">
                <help short="Product of the purchase plan."/>
              </arg>
              <arg type="string" var="$parameters.properties.source.PlatformImage.planInfo.planPublisher" options="plan-publisher">
                <help short="Publisher of the purchase plan."/>
              </arg>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.source.PlatformImage.publisher" options="publisher">
              <help short="Image Publisher in [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages)."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.source.PlatformImage.sku" options="sku">
              <help short="Image sku from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages)."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.source.PlatformImage.version" options="version">
              <help short="Image version from the [Azure Gallery Images](https://docs.microsoft.com/en-us/rest/api/compute/virtualmachineimages). If 'latest' is specified here, the version is evaluated when the image build takes place, not when the template is submitted."/>
            </arg>
          </arg>
          <arg type="object" var="$parameters.properties.source.SharedImageVersion" options="shared-image-version">
            <arg type="string" var="$parameters.properties.source.SharedImageVersion.imageVersionId" options="image-version-id">
              <help short="ARM resource id of the image version. When image version name is 'latest', the version is evaluated when the image build takes place."/>
            </arg>
          </arg>
        </arg>
        <arg nullable="True" type="string" var="$parameters.properties.stagingResourceGroup" options="staging-resource-group" group="Properties">
          <help short="The staging resource group id in the same subscription as the image template that will be used to build the image. If this field is empty, a resource group with a random name will be created. If the resource group specified in this field doesn't exist, it will be created with the same name. If the resource group specified exists, it must be empty and in the same region as the image template. The resource group created will be deleted during template deletion if this field is empty or the resource group specified doesn't exist, but if the resource group specified exists the resources created in the resource group will be deleted during template deletion and the resource group itself will remain."/>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.validate" options="validate" group="Properties">
          <help short="Configuration options and list of validations to be performed on the resulting image."/>
          <arg nullable="True" type="boolean" var="$parameters.properties.validate.continueDistributeOnFailure" options="continue-distribute-on-failure">
            <help short="If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior. If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]"/>
          </arg>
          <arg nullable="True" type="array<object>" var="$parameters.properties.validate.inVMValidations" options="in-vm-validations">
            <help short="List of validations to be performed."/>
            <item nullable="True" type="object">
              <arg type="object" var="$parameters.properties.validate.inVMValidations[].File" options="file">
                <arg nullable="True" type="string" var="$parameters.properties.validate.inVMValidations[].File.destination" options="destination">
                  <help short="The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM"/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.validate.inVMValidations[].File.sha256Checksum" options="sha256-checksum">
                  <help short="SHA256 checksum of the file provided in the sourceUri field above"/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.validate.inVMValidations[].File.sourceUri" options="source-uri">
                  <help short="The URI of the file to be uploaded to the VM for validation. It can be a github link, Azure Storage URI (authorized or SAS), etc"/>
                </arg>
              </arg>
              <arg type="object" var="$parameters.properties.validate.inVMValidations[].PowerShell" options="power-shell">
                <arg nullable="True" type="array<string>" var="$parameters.properties.validate.inVMValidations[].PowerShell.inline" options="inline">
                  <help short="Array of PowerShell commands to execute"/>
                  <item nullable="True" type="string"/>
                </arg>
                <arg nullable="True" type="boolean" var="$parameters.properties.validate.inVMValidations[].PowerShell.runAsSystem" options="run-as-system">
                  <help short="If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true."/>
                </arg>
                <arg nullable="True" type="boolean" var="$parameters.properties.validate.inVMValidations[].PowerShell.runElevated" options="run-elevated">
                  <help short="If specified, the PowerShell script will be run with elevated privileges"/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.validate.inVMValidations[].PowerShell.scriptUri" options="script-uri">
                  <help short="URI of the PowerShell script to be run for validation. It can be a github link, Azure Storage URI, etc"/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.validate.inVMValidations[].PowerShell.sha256Checksum" options="sha256-checksum">
                  <help short="SHA256 checksum of the power shell script provided in the scriptUri field above"/>
                </arg>
                <arg nullable="True" type="array<integer32>" var="$parameters.properties.validate.inVMValidations[].PowerShell.validExitCodes" options="valid-exit-codes">
                  <help short="Valid exit codes for the PowerShell script. [Default: 0]"/>
                  <item nullable="True" type="integer32"/>
                </arg>
              </arg>
              <arg type="object" var="$parameters.properties.validate.inVMValidations[].Shell" options="shell">
                <arg nullable="True" type="array<string>" var="$parameters.properties.validate.inVMValidations[].Shell.inline" options="inline">
                  <help short="Array of shell commands to execute"/>
                  <item nullable="True" type="string"/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.validate.inVMValidations[].Shell.scriptUri" options="script-uri">
                  <help short="URI of the shell script to be run for validation. It can be a github link, Azure Storage URI, etc"/>
                </arg>
                <arg nullable="True" type="string" var="$parameters.properties.validate.inVMValidations[].Shell.sha256Checksum" options="sha256-checksum">
                  <help short="SHA256 checksum of the shell script provided in the scriptUri field"/>
                </arg>
              </arg>
              <arg nullable="True" type="string" var="$parameters.properties.validate.inVMValidations[].name" options="name">
                <help short="Friendly Name to provide context on what this validation step does"/>
              </arg>
            </item>
          </arg>
          <arg nullable="True" type="boolean" var="$parameters.properties.validate.sourceValidationOnly" options="source-validation-only">
            <help short="If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build will be run to generate and then validate a customized image."/>
          </arg>
        </arg>
        <arg nullable="True" type="object" var="$parameters.properties.vmProfile" options="vm-profile" group="Properties">
          <help short="Describes how virtual machine is set up to build images"/>
          <arg nullable="True" type="integer32" var="$parameters.properties.vmProfile.osDiskSizeGB" options="os-disk-size-gb">
            <help short="Size of the OS disk in GB. Omit or specify 0 to use Azure's default OS disk size."/>
            <format minimum="0"/>
          </arg>
          <arg nullable="True" type="array<string>" var="$parameters.properties.vmProfile.userAssignedIdentities" options="user-assigned-identities">
            <help short="Optional array of resource IDs of user assigned managed identities to be configured on the build VM and validation VM. This may include the identity of the image template."/>
            <item nullable="True" type="string"/>
          </arg>
          <arg nullable="True" type="string" var="$parameters.properties.vmProfile.vmSize" options="vm-size">
            <help short="Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default (Standard_D1_v2 for Gen1 images and Standard_D2ds_v4 for Gen2 images)."/>
          </arg>
          <arg nullable="True" type="object" var="$parameters.properties.vmProfile.vnetConfig" options="vnet-config">
            <help short="Optional configuration of the virtual network to use to deploy the build VM and validation VM in. Omit if no specific virtual network needs to be used."/>
            <arg nullable="True" type="string" var="$parameters.properties.vmProfile.vnetConfig.proxyVmSize" options="proxy-vm-size">
              <help short="Size of the proxy virtual machine used to pass traffic to the build VM and validation VM. Omit or specify empty string to use the default (Standard_A1_v2)."/>
            </arg>
            <arg nullable="True" type="string" var="$parameters.properties.vmProfile.vnetConfig.subnetId" options="subnet-id">
              <help short="Resource id of a pre-existing subnet."/>
            </arg>
          </arg>
        </arg>
      </argGroup>
      <operation operationId="VirtualMachineImageTemplates_Get">
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
          <request method="get">
            <path>
              <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01&quot;"/>
              </const>
            </query>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object" cls="ImageTemplate_read">
                  <prop readOnly="True" type="ResourceId" name="id">
                    <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.VirtualMachineImages/imageTemplates/{}"/>
                  </prop>
                  <prop type="IdentityObject" name="identity" required="True">
                    <prop type="string" name="type">
                      <enum>
                        <item value="&quot;None&quot;"/>
                        <item value="&quot;UserAssigned&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="userAssignedIdentities">
                      <additionalProp>
                        <item type="object">
                          <prop readOnly="True" type="string" name="clientId"/>
                          <prop readOnly="True" type="string" name="principalId"/>
                        </item>
                      </additionalProp>
                    </prop>
                  </prop>
                  <prop type="ResourceLocation" name="location" required="True"/>
                  <prop readOnly="True" type="string" name="name"/>
                  <prop type="object" name="properties" clientFlatten="True">
                    <prop type="integer32" name="buildTimeoutInMinutes">
                      <default value="0"/>
                      <format maximum="960" minimum="0"/>
                    </prop>
                    <prop type="array<object>" name="customize">
                      <item type="object">
                        <prop type="string" name="name"/>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;File&quot;"/>
                            <item value="&quot;PowerShell&quot;"/>
                            <item value="&quot;Shell&quot;"/>
                            <item value="&quot;WindowsRestart&quot;"/>
                            <item value="&quot;WindowsUpdate&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="File">
                          <prop type="string" name="destination"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="string" name="sourceUri"/>
                        </discriminator>
                        <discriminator property="type" value="PowerShell">
                          <prop type="array<string>" name="inline">
                            <item type="string"/>
                          </prop>
                          <prop type="boolean" name="runAsSystem">
                            <default value="false"/>
                          </prop>
                          <prop type="boolean" name="runElevated">
                            <default value="false"/>
                          </prop>
                          <prop type="string" name="scriptUri"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="array<integer32>" name="validExitCodes">
                            <item type="integer32"/>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="Shell">
                          <prop type="array<string>" name="inline">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="scriptUri"/>
                          <prop type="string" name="sha256Checksum">
                            <default value="&quot;&quot;"/>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="WindowsRestart">
                          <prop type="string" name="restartCheckCommand"/>
                          <prop type="string" name="restartCommand"/>
                          <prop type="string" name="restartTimeout"/>
                        </discriminator>
                        <discriminator property="type" value="WindowsUpdate">
                          <prop type="array<string>" name="filters">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="searchCriteria"/>
                          <prop type="integer32" name="updateLimit">
                            <default value="0"/>
                            <format minimum="0"/>
                          </prop>
                        </discriminator>
                      </item>
                    </prop>
                    <prop type="array<object>" name="distribute" required="True">
                      <item type="object">
                        <prop type="object" name="artifactTags">
                          <additionalProp>
                            <item type="string"/>
                          </additionalProp>
                        </prop>
                        <prop type="string" name="runOutputName" required="True">
                          <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                        </prop>
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;ManagedImage&quot;"/>
                            <item value="&quot;SharedImage&quot;"/>
                            <item value="&quot;VHD&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="ManagedImage">
                          <prop type="string" name="imageId" required="True"/>
                          <prop type="string" name="location" required="True"/>
                        </discriminator>
                        <discriminator property="type" value="SharedImage">
                          <prop type="boolean" name="excludeFromLatest">
                            <default value="false"/>
                          </prop>
                          <prop type="string" name="galleryImageId" required="True"/>
                          <prop type="array<string>" name="replicationRegions">
                            <item type="string"/>
                          </prop>
                          <prop type="string" name="storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                              <item value="&quot;Standard_ZRS&quot;"/>
                            </enum>
                          </prop>
                          <prop type="array<object>" name="targetRegions">
                            <item type="object">
                              <prop type="string" name="name" required="True"/>
                              <prop type="integer32" name="replicaCount">
                                <default value="1"/>
                                <format minimum="1"/>
                              </prop>
                              <prop type="string" name="storageAccountType">
                                <enum>
                                  <item value="&quot;Premium_LRS&quot;"/>
                                  <item value="&quot;Standard_LRS&quot;"/>
                                  <item value="&quot;Standard_ZRS&quot;"/>
                                </enum>
                              </prop>
                            </item>
                          </prop>
                          <prop type="object" name="versioning">
                            <prop type="string" name="scheme" required="True">
                              <enum>
                                <item value="&quot;Latest&quot;"/>
                                <item value="&quot;Source&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="scheme" value="Latest">
                              <prop type="integer32" name="major">
                                <default value="-1"/>
                                <format minimum="-1"/>
                              </prop>
                            </discriminator>
                          </prop>
                        </discriminator>
                        <discriminator property="type" value="VHD">
                          <prop type="string" name="uri"/>
                        </discriminator>
                      </item>
                    </prop>
                    <prop readOnly="True" type="string" name="exactStagingResourceGroup"/>
                    <prop type="object" name="lastRunStatus">
                      <prop type="dateTime" name="endTime"/>
                      <prop type="string" name="message"/>
                      <prop type="string" name="runState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Canceling&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;PartiallySucceeded&quot;"/>
                          <item value="&quot;Running&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                        </enum>
                      </prop>
                      <prop type="string" name="runSubState">
                        <enum>
                          <item value="&quot;Building&quot;"/>
                          <item value="&quot;Customizing&quot;"/>
                          <item value="&quot;Distributing&quot;"/>
                          <item value="&quot;Optimizing&quot;"/>
                          <item value="&quot;Queued&quot;"/>
                          <item value="&quot;Validating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="startTime"/>
                    </prop>
                    <prop type="object" name="optimize">
                      <prop type="object" name="vmBoot">
                        <prop type="string" name="state">
                          <enum>
                            <item value="&quot;Disabled&quot;"/>
                            <item value="&quot;Enabled&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                    </prop>
                    <prop type="object" name="provisioningError">
                      <prop type="string" name="message"/>
                      <prop type="string" name="provisioningErrorCode">
                        <enum>
                          <item value="&quot;BadCustomizerType&quot;"/>
                          <item value="&quot;BadDistributeType&quot;"/>
                          <item value="&quot;BadManagedImageSource&quot;"/>
                          <item value="&quot;BadPIRSource&quot;"/>
                          <item value="&quot;BadSharedImageDistribute&quot;"/>
                          <item value="&quot;BadSharedImageVersionSource&quot;"/>
                          <item value="&quot;BadSourceType&quot;"/>
                          <item value="&quot;BadStagingResourceGroup&quot;"/>
                          <item value="&quot;BadValidatorType&quot;"/>
                          <item value="&quot;NoCustomizerScript&quot;"/>
                          <item value="&quot;NoValidatorScript&quot;"/>
                          <item value="&quot;Other&quot;"/>
                          <item value="&quot;ServerError&quot;"/>
                          <item value="&quot;UnsupportedCustomizerType&quot;"/>
                          <item value="&quot;UnsupportedValidatorType&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="string" name="provisioningState">
                      <enum>
                        <item value="&quot;Canceled&quot;"/>
                        <item value="&quot;Creating&quot;"/>
                        <item value="&quot;Deleting&quot;"/>
                        <item value="&quot;Failed&quot;"/>
                        <item value="&quot;Succeeded&quot;"/>
                        <item value="&quot;Updating&quot;"/>
                      </enum>
                    </prop>
                    <prop type="object" name="source" required="True">
                      <prop type="string" name="type" required="True">
                        <enum>
                          <item value="&quot;ManagedImage&quot;"/>
                          <item value="&quot;PlatformImage&quot;"/>
                          <item value="&quot;SharedImageVersion&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="type" value="ManagedImage">
                        <prop type="string" name="imageId" required="True"/>
                      </discriminator>
                      <discriminator property="type" value="PlatformImage">
                        <prop readOnly="True" type="string" name="exactVersion"/>
                        <prop type="string" name="offer"/>
                        <prop type="object" name="planInfo">
                          <prop type="string" name="planName" required="True"/>
                          <prop type="string" name="planProduct" required="True"/>
                          <prop type="string" name="planPublisher" required="True"/>
                        </prop>
                        <prop type="string" name="publisher"/>
                        <prop type="string" name="sku"/>
                        <prop type="string" name="version"/>
                      </discriminator>
                      <discriminator property="type" value="SharedImageVersion">
                        <prop readOnly="True" type="string" name="exactVersion"/>
                        <prop type="string" name="imageVersionId" required="True"/>
                      </discriminator>
                    </prop>
                    <prop type="string" name="stagingResourceGroup"/>
                    <prop type="object" name="validate">
                      <prop type="boolean" name="continueDistributeOnFailure">
                        <default value="false"/>
                      </prop>
                      <prop type="array<object>" name="inVMValidations">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;File&quot;"/>
                              <item value="&quot;PowerShell&quot;"/>
                              <item value="&quot;Shell&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="File">
                            <prop type="string" name="destination"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="string" name="sourceUri"/>
                          </discriminator>
                          <discriminator property="type" value="PowerShell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="runAsSystem">
                              <default value="false"/>
                            </prop>
                            <prop type="boolean" name="runElevated">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="array<integer32>" name="validExitCodes">
                              <item type="integer32"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="Shell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="boolean" name="sourceValidationOnly">
                        <default value="false"/>
                      </prop>
                    </prop>
                    <prop type="object" name="vmProfile">
                      <prop type="integer32" name="osDiskSizeGB">
                        <default value="0"/>
                        <format minimum="0"/>
                      </prop>
                      <prop type="array<string>" name="userAssignedIdentities">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="vmSize">
                        <default value="&quot;&quot;"/>
                      </prop>
                      <prop type="object" name="vnetConfig">
                        <prop type="string" name="proxyVmSize">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="string" name="subnetId"/>
                      </prop>
                    </prop>
                  </prop>
                  <prop readOnly="True" type="object" name="systemData">
                    <prop type="dateTime" name="createdAt"/>
                    <prop type="string" name="createdBy"/>
                    <prop type="string" name="createdByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                    <prop type="dateTime" name="lastModifiedAt"/>
                    <prop type="string" name="lastModifiedBy"/>
                    <prop type="string" name="lastModifiedByType">
                      <enum>
                        <item value="&quot;Application&quot;"/>
                        <item value="&quot;Key&quot;"/>
                        <item value="&quot;ManagedIdentity&quot;"/>
                        <item value="&quot;User&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                  <prop type="object" name="tags">
                    <additionalProp>
                      <item type="string"/>
                    </additionalProp>
                  </prop>
                  <prop readOnly="True" type="string" name="type"/>
                </schema>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <operation>
        <instanceUpdate ref="$Instance">
          <json>
            <schema type="object" name="parameters" required="True" clientFlatten="True">
              <prop type="IdentityObject" name="identity" arg="$parameters.identity" required="True">
                <prop type="string" name="type" arg="$parameters.identity.type">
                  <enum>
                    <item value="&quot;None&quot;"/>
                    <item value="&quot;UserAssigned&quot;"/>
                  </enum>
                </prop>
                <prop type="object" name="userAssignedIdentities" arg="$parameters.identity.userAssignedIdentities">
                  <additionalProp>
                    <item type="object"/>
                  </additionalProp>
                </prop>
              </prop>
              <prop type="object" name="properties" clientFlatten="True">
                <prop type="integer32" name="buildTimeoutInMinutes" arg="$parameters.properties.buildTimeoutInMinutes">
                  <default value="0"/>
                  <format maximum="960" minimum="0"/>
                </prop>
                <prop type="array<object>" name="customize" arg="$parameters.properties.customize">
                  <item type="object">
                    <prop type="string" name="name" arg="$parameters.properties.customize[].name"/>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item arg="$parameters.properties.customize[].File" value="&quot;File&quot;"/>
                        <item arg="$parameters.properties.customize[].PowerShell" value="&quot;PowerShell&quot;"/>
                        <item arg="$parameters.properties.customize[].Shell" value="&quot;Shell&quot;"/>
                        <item arg="$parameters.properties.customize[].WindowsRestart" value="&quot;WindowsRestart&quot;"/>
                        <item arg="$parameters.properties.customize[].WindowsUpdate" value="&quot;WindowsUpdate&quot;"/>
                      </enum>
                    </prop>
                    <discriminator property="type" value="File">
                      <prop type="string" name="destination" arg="$parameters.properties.customize[].File.destination"/>
                      <prop type="string" name="sha256Checksum" arg="$parameters.properties.customize[].File.sha256Checksum">
                        <default value="&quot;&quot;"/>
                      </prop>
                      <prop type="string" name="sourceUri" arg="$parameters.properties.customize[].File.sourceUri"/>
                    </discriminator>
                    <discriminator property="type" value="PowerShell">
                      <prop type="array<string>" name="inline" arg="$parameters.properties.customize[].PowerShell.inline">
                        <item type="string"/>
                      </prop>
                      <prop type="boolean" name="runAsSystem" arg="$parameters.properties.customize[].PowerShell.runAsSystem">
                        <default value="false"/>
                      </prop>
                      <prop type="boolean" name="runElevated" arg="$parameters.properties.customize[].PowerShell.runElevated">
                        <default value="false"/>
                      </prop>
                      <prop type="string" name="scriptUri" arg="$parameters.properties.customize[].PowerShell.scriptUri"/>
                      <prop type="string" name="sha256Checksum" arg="$parameters.properties.customize[].PowerShell.sha256Checksum">
                        <default value="&quot;&quot;"/>
                      </prop>
                      <prop type="array<integer32>" name="validExitCodes" arg="$parameters.properties.customize[].PowerShell.validExitCodes">
                        <item type="integer32"/>
                      </prop>
                    </discriminator>
                    <discriminator property="type" value="Shell">
                      <prop type="array<string>" name="inline" arg="$parameters.properties.customize[].Shell.inline">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="scriptUri" arg="$parameters.properties.customize[].Shell.scriptUri"/>
                      <prop type="string" name="sha256Checksum" arg="$parameters.properties.customize[].Shell.sha256Checksum">
                        <default value="&quot;&quot;"/>
                      </prop>
                    </discriminator>
                    <discriminator property="type" value="WindowsRestart">
                      <prop type="string" name="restartCheckCommand" arg="$parameters.properties.customize[].WindowsRestart.restartCheckCommand"/>
                      <prop type="string" name="restartCommand" arg="$parameters.properties.customize[].WindowsRestart.restartCommand"/>
                      <prop type="string" name="restartTimeout" arg="$parameters.properties.customize[].WindowsRestart.restartTimeout"/>
                    </discriminator>
                    <discriminator property="type" value="WindowsUpdate">
                      <prop type="array<string>" name="filters" arg="$parameters.properties.customize[].WindowsUpdate.filters">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="searchCriteria" arg="$parameters.properties.customize[].WindowsUpdate.searchCriteria"/>
                      <prop type="integer32" name="updateLimit" arg="$parameters.properties.customize[].WindowsUpdate.updateLimit">
                        <default value="0"/>
                        <format minimum="0"/>
                      </prop>
                    </discriminator>
                  </item>
                </prop>
                <prop type="array<object>" name="distribute" arg="$parameters.properties.distribute" required="True">
                  <item type="object">
                    <prop type="object" name="artifactTags" arg="$parameters.properties.distribute[].artifactTags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop type="string" name="runOutputName" arg="$parameters.properties.distribute[].runOutputName" required="True">
                      <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                    </prop>
                    <prop type="string" name="type" required="True">
                      <enum>
                        <item arg="$parameters.properties.distribute[].ManagedImage" value="&quot;ManagedImage&quot;"/>
                        <item arg="$parameters.properties.distribute[].SharedImage" value="&quot;SharedImage&quot;"/>
                        <item arg="$parameters.properties.distribute[].VHD" value="&quot;VHD&quot;"/>
                      </enum>
                    </prop>
                    <discriminator property="type" value="ManagedImage">
                      <prop type="string" name="imageId" arg="$parameters.properties.distribute[].ManagedImage.imageId" required="True"/>
                      <prop type="string" name="location" arg="$parameters.properties.distribute[].ManagedImage.location" required="True"/>
                    </discriminator>
                    <discriminator property="type" value="SharedImage">
                      <prop type="boolean" name="excludeFromLatest" arg="$parameters.properties.distribute[].SharedImage.excludeFromLatest">
                        <default value="false"/>
                      </prop>
                      <prop type="string" name="galleryImageId" arg="$parameters.properties.distribute[].SharedImage.galleryImageId" required="True"/>
                      <prop type="array<string>" name="replicationRegions" arg="$parameters.properties.distribute[].SharedImage.replicationRegions">
                        <item type="string"/>
                      </prop>
                      <prop type="string" name="storageAccountType" arg="$parameters.properties.distribute[].SharedImage.storageAccountType">
                        <enum>
                          <item value="&quot;Premium_LRS&quot;"/>
                          <item value="&quot;Standard_LRS&quot;"/>
                          <item value="&quot;Standard_ZRS&quot;"/>
                        </enum>
                      </prop>
                      <prop type="array<object>" name="targetRegions" arg="$parameters.properties.distribute[].SharedImage.targetRegions">
                        <item type="object">
                          <prop type="string" name="name" arg="$parameters.properties.distribute[].SharedImage.targetRegions[].name" required="True"/>
                          <prop type="integer32" name="replicaCount" arg="$parameters.properties.distribute[].SharedImage.targetRegions[].replicaCount">
                            <default value="1"/>
                            <format minimum="1"/>
                          </prop>
                          <prop type="string" name="storageAccountType" arg="$parameters.properties.distribute[].SharedImage.targetRegions[].storageAccountType">
                            <enum>
                              <item value="&quot;Premium_LRS&quot;"/>
                              <item value="&quot;Standard_LRS&quot;"/>
                              <item value="&quot;Standard_ZRS&quot;"/>
                            </enum>
                          </prop>
                        </item>
                      </prop>
                      <prop type="object" name="versioning" arg="$parameters.properties.distribute[].SharedImage.versioning">
                        <prop type="string" name="scheme" required="True">
                          <enum>
                            <item arg="$parameters.properties.distribute[].SharedImage.versioning.Latest" value="&quot;Latest&quot;"/>
                            <item value="&quot;Source&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="scheme" value="Latest">
                          <prop type="integer32" name="major" arg="$parameters.properties.distribute[].SharedImage.versioning.Latest.major">
                            <default value="-1"/>
                            <format minimum="-1"/>
                          </prop>
                        </discriminator>
                      </prop>
                    </discriminator>
                    <discriminator property="type" value="VHD">
                      <prop type="string" name="uri" arg="$parameters.properties.distribute[].VHD.uri"/>
                    </discriminator>
                  </item>
                </prop>
                <prop type="object" name="optimize" arg="$parameters.properties.optimize">
                  <prop type="object" name="vmBoot" arg="$parameters.properties.optimize.vmBoot">
                    <prop type="string" name="state" arg="$parameters.properties.optimize.vmBoot.state">
                      <enum>
                        <item value="&quot;Disabled&quot;"/>
                        <item value="&quot;Enabled&quot;"/>
                      </enum>
                    </prop>
                  </prop>
                </prop>
                <prop type="object" name="source" arg="$parameters.properties.source" required="True">
                  <prop type="string" name="type" required="True">
                    <enum>
                      <item arg="$parameters.properties.source.ManagedImage" value="&quot;ManagedImage&quot;"/>
                      <item arg="$parameters.properties.source.PlatformImage" value="&quot;PlatformImage&quot;"/>
                      <item arg="$parameters.properties.source.SharedImageVersion" value="&quot;SharedImageVersion&quot;"/>
                    </enum>
                  </prop>
                  <discriminator property="type" value="ManagedImage">
                    <prop type="string" name="imageId" arg="$parameters.properties.source.ManagedImage.imageId" required="True"/>
                  </discriminator>
                  <discriminator property="type" value="PlatformImage">
                    <prop type="string" name="offer" arg="$parameters.properties.source.PlatformImage.offer"/>
                    <prop type="object" name="planInfo" arg="$parameters.properties.source.PlatformImage.planInfo">
                      <prop type="string" name="planName" arg="$parameters.properties.source.PlatformImage.planInfo.planName" required="True"/>
                      <prop type="string" name="planProduct" arg="$parameters.properties.source.PlatformImage.planInfo.planProduct" required="True"/>
                      <prop type="string" name="planPublisher" arg="$parameters.properties.source.PlatformImage.planInfo.planPublisher" required="True"/>
                    </prop>
                    <prop type="string" name="publisher" arg="$parameters.properties.source.PlatformImage.publisher"/>
                    <prop type="string" name="sku" arg="$parameters.properties.source.PlatformImage.sku"/>
                    <prop type="string" name="version" arg="$parameters.properties.source.PlatformImage.version"/>
                  </discriminator>
                  <discriminator property="type" value="SharedImageVersion">
                    <prop type="string" name="imageVersionId" arg="$parameters.properties.source.SharedImageVersion.imageVersionId" required="True"/>
                  </discriminator>
                </prop>
                <prop type="string" name="stagingResourceGroup" arg="$parameters.properties.stagingResourceGroup"/>
                <prop type="object" name="validate" arg="$parameters.properties.validate">
                  <prop type="boolean" name="continueDistributeOnFailure" arg="$parameters.properties.validate.continueDistributeOnFailure">
                    <default value="false"/>
                  </prop>
                  <prop type="array<object>" name="inVMValidations" arg="$parameters.properties.validate.inVMValidations">
                    <item type="object">
                      <prop type="string" name="name" arg="$parameters.properties.validate.inVMValidations[].name"/>
                      <prop type="string" name="type" required="True">
                        <enum>
                          <item arg="$parameters.properties.validate.inVMValidations[].File" value="&quot;File&quot;"/>
                          <item arg="$parameters.properties.validate.inVMValidations[].PowerShell" value="&quot;PowerShell&quot;"/>
                          <item arg="$parameters.properties.validate.inVMValidations[].Shell" value="&quot;Shell&quot;"/>
                        </enum>
                      </prop>
                      <discriminator property="type" value="File">
                        <prop type="string" name="destination" arg="$parameters.properties.validate.inVMValidations[].File.destination"/>
                        <prop type="string" name="sha256Checksum" arg="$parameters.properties.validate.inVMValidations[].File.sha256Checksum">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="string" name="sourceUri" arg="$parameters.properties.validate.inVMValidations[].File.sourceUri"/>
                      </discriminator>
                      <discriminator property="type" value="PowerShell">
                        <prop type="array<string>" name="inline" arg="$parameters.properties.validate.inVMValidations[].PowerShell.inline">
                          <item type="string"/>
                        </prop>
                        <prop type="boolean" name="runAsSystem" arg="$parameters.properties.validate.inVMValidations[].PowerShell.runAsSystem">
                          <default value="false"/>
                        </prop>
                        <prop type="boolean" name="runElevated" arg="$parameters.properties.validate.inVMValidations[].PowerShell.runElevated">
                          <default value="false"/>
                        </prop>
                        <prop type="string" name="scriptUri" arg="$parameters.properties.validate.inVMValidations[].PowerShell.scriptUri"/>
                        <prop type="string" name="sha256Checksum" arg="$parameters.properties.validate.inVMValidations[].PowerShell.sha256Checksum">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="array<integer32>" name="validExitCodes" arg="$parameters.properties.validate.inVMValidations[].PowerShell.validExitCodes">
                          <item type="integer32"/>
                        </prop>
                      </discriminator>
                      <discriminator property="type" value="Shell">
                        <prop type="array<string>" name="inline" arg="$parameters.properties.validate.inVMValidations[].Shell.inline">
                          <item type="string"/>
                        </prop>
                        <prop type="string" name="scriptUri" arg="$parameters.properties.validate.inVMValidations[].Shell.scriptUri"/>
                        <prop type="string" name="sha256Checksum" arg="$parameters.properties.validate.inVMValidations[].Shell.sha256Checksum">
                          <default value="&quot;&quot;"/>
                        </prop>
                      </discriminator>
                    </item>
                  </prop>
                  <prop type="boolean" name="sourceValidationOnly" arg="$parameters.properties.validate.sourceValidationOnly">
                    <default value="false"/>
                  </prop>
                </prop>
                <prop type="object" name="vmProfile" arg="$parameters.properties.vmProfile">
                  <prop type="integer32" name="osDiskSizeGB" arg="$parameters.properties.vmProfile.osDiskSizeGB">
                    <default value="0"/>
                    <format minimum="0"/>
                  </prop>
                  <prop type="array<string>" name="userAssignedIdentities" arg="$parameters.properties.vmProfile.userAssignedIdentities">
                    <item type="string"/>
                  </prop>
                  <prop type="string" name="vmSize" arg="$parameters.properties.vmProfile.vmSize">
                    <default value="&quot;&quot;"/>
                  </prop>
                  <prop type="object" name="vnetConfig" arg="$parameters.properties.vmProfile.vnetConfig">
                    <prop type="string" name="proxyVmSize" arg="$parameters.properties.vmProfile.vnetConfig.proxyVmSize">
                      <default value="&quot;&quot;"/>
                    </prop>
                    <prop type="string" name="subnetId" arg="$parameters.properties.vmProfile.vnetConfig.subnetId"/>
                  </prop>
                </prop>
              </prop>
              <prop type="object" name="tags" arg="$parameters.tags">
                <additionalProp>
                  <item type="string"/>
                </additionalProp>
              </prop>
            </schema>
          </json>
        </instanceUpdate>
      </operation>
      <operation operationId="VirtualMachineImageTemplates_CreateOrUpdate">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
          <request method="put">
            <path>
              <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2022-07-01&quot;"/>
              </const>
            </query>
            <body>
              <json ref="$Instance"/>
            </body>
          </request>
          <response statusCode="200 201">
            <body>
              <json var="$Instance">
                <schema type="@ImageTemplate_read"/>
              </json>
            </body>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@ODataV4Format"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
    <commandGroup name="optimizer">
      <command name="add" version="2022-07-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" subresource="properties.optimize" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.imageTemplateName" options="image-template-name" required="True" group="" idPart="name">
            <help short="The name of the image template."/>
            <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="VmBoot">
          <arg type="string" var="$parameters.properties.optimize.vmBoot.state" options="vm-boot-state" group="VmBoot">
            <help short="Enabling this field will improve VM boot time by optimizing the final customized image output."/>
            <enum>
              <item name="Disabled" value="&quot;Disabled&quot;"/>
              <item name="Enabled" value="&quot;Enabled&quot;"/>
            </enum>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="properties.optimize"/>
          </json>
        </subresourceSelector>
        <operation operationId="VirtualMachineImageTemplates_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
            <request method="get">
              <path>
                <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                  <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                </param>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-07-01&quot;"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="ImageTemplate_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.VirtualMachineImages/imageTemplates/{}"/>
                    </prop>
                    <prop type="IdentityObject" name="identity" required="True">
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="integer32" name="buildTimeoutInMinutes">
                        <default value="0"/>
                        <format maximum="960" minimum="0"/>
                      </prop>
                      <prop type="array<object>" name="customize">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;File&quot;"/>
                              <item value="&quot;PowerShell&quot;"/>
                              <item value="&quot;Shell&quot;"/>
                              <item value="&quot;WindowsRestart&quot;"/>
                              <item value="&quot;WindowsUpdate&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="File">
                            <prop type="string" name="destination"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="string" name="sourceUri"/>
                          </discriminator>
                          <discriminator property="type" value="PowerShell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="runAsSystem">
                              <default value="false"/>
                            </prop>
                            <prop type="boolean" name="runElevated">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="array<integer32>" name="validExitCodes">
                              <item type="integer32"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="Shell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="WindowsRestart">
                            <prop type="string" name="restartCheckCommand"/>
                            <prop type="string" name="restartCommand"/>
                            <prop type="string" name="restartTimeout"/>
                          </discriminator>
                          <discriminator property="type" value="WindowsUpdate">
                            <prop type="array<string>" name="filters">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="searchCriteria"/>
                            <prop type="integer32" name="updateLimit">
                              <default value="0"/>
                              <format minimum="0"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="array<object>" name="distribute" required="True">
                        <item type="object">
                          <prop type="object" name="artifactTags">
                            <additionalProp>
                              <item type="string"/>
                            </additionalProp>
                          </prop>
                          <prop type="string" name="runOutputName" required="True">
                            <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                          </prop>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;ManagedImage&quot;"/>
                              <item value="&quot;SharedImage&quot;"/>
                              <item value="&quot;VHD&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="ManagedImage">
                            <prop type="string" name="imageId" required="True"/>
                            <prop type="string" name="location" required="True"/>
                          </discriminator>
                          <discriminator property="type" value="SharedImage">
                            <prop type="boolean" name="excludeFromLatest">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="galleryImageId" required="True"/>
                            <prop type="array<string>" name="replicationRegions">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="storageAccountType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                                <item value="&quot;Standard_ZRS&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<object>" name="targetRegions">
                              <item type="object">
                                <prop type="string" name="name" required="True"/>
                                <prop type="integer32" name="replicaCount">
                                  <default value="1"/>
                                  <format minimum="1"/>
                                </prop>
                                <prop type="string" name="storageAccountType">
                                  <enum>
                                    <item value="&quot;Premium_LRS&quot;"/>
                                    <item value="&quot;Standard_LRS&quot;"/>
                                    <item value="&quot;Standard_ZRS&quot;"/>
                                  </enum>
                                </prop>
                              </item>
                            </prop>
                            <prop type="object" name="versioning">
                              <prop type="string" name="scheme" required="True">
                                <enum>
                                  <item value="&quot;Latest&quot;"/>
                                  <item value="&quot;Source&quot;"/>
                                </enum>
                              </prop>
                              <discriminator property="scheme" value="Latest">
                                <prop type="integer32" name="major">
                                  <default value="-1"/>
                                  <format minimum="-1"/>
                                </prop>
                              </discriminator>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="VHD">
                            <prop type="string" name="uri"/>
                          </discriminator>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="exactStagingResourceGroup"/>
                      <prop type="object" name="lastRunStatus">
                        <prop type="dateTime" name="endTime"/>
                        <prop type="string" name="message"/>
                        <prop type="string" name="runState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Canceling&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;PartiallySucceeded&quot;"/>
                            <item value="&quot;Running&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="runSubState">
                          <enum>
                            <item value="&quot;Building&quot;"/>
                            <item value="&quot;Customizing&quot;"/>
                            <item value="&quot;Distributing&quot;"/>
                            <item value="&quot;Optimizing&quot;"/>
                            <item value="&quot;Queued&quot;"/>
                            <item value="&quot;Validating&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="startTime"/>
                      </prop>
                      <prop type="object" name="optimize">
                        <prop type="object" name="vmBoot">
                          <prop type="string" name="state">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="object" name="provisioningError">
                        <prop type="string" name="message"/>
                        <prop type="string" name="provisioningErrorCode">
                          <enum>
                            <item value="&quot;BadCustomizerType&quot;"/>
                            <item value="&quot;BadDistributeType&quot;"/>
                            <item value="&quot;BadManagedImageSource&quot;"/>
                            <item value="&quot;BadPIRSource&quot;"/>
                            <item value="&quot;BadSharedImageDistribute&quot;"/>
                            <item value="&quot;BadSharedImageVersionSource&quot;"/>
                            <item value="&quot;BadSourceType&quot;"/>
                            <item value="&quot;BadStagingResourceGroup&quot;"/>
                            <item value="&quot;BadValidatorType&quot;"/>
                            <item value="&quot;NoCustomizerScript&quot;"/>
                            <item value="&quot;NoValidatorScript&quot;"/>
                            <item value="&quot;Other&quot;"/>
                            <item value="&quot;ServerError&quot;"/>
                            <item value="&quot;UnsupportedCustomizerType&quot;"/>
                            <item value="&quot;UnsupportedValidatorType&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Creating&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="source" required="True">
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;ManagedImage&quot;"/>
                            <item value="&quot;PlatformImage&quot;"/>
                            <item value="&quot;SharedImageVersion&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="ManagedImage">
                          <prop type="string" name="imageId" required="True"/>
                        </discriminator>
                        <discriminator property="type" value="PlatformImage">
                          <prop readOnly="True" type="string" name="exactVersion"/>
                          <prop type="string" name="offer"/>
                          <prop type="object" name="planInfo">
                            <prop type="string" name="planName" required="True"/>
                            <prop type="string" name="planProduct" required="True"/>
                            <prop type="string" name="planPublisher" required="True"/>
                          </prop>
                          <prop type="string" name="publisher"/>
                          <prop type="string" name="sku"/>
                          <prop type="string" name="version"/>
                        </discriminator>
                        <discriminator property="type" value="SharedImageVersion">
                          <prop readOnly="True" type="string" name="exactVersion"/>
                          <prop type="string" name="imageVersionId" required="True"/>
                        </discriminator>
                      </prop>
                      <prop type="string" name="stagingResourceGroup"/>
                      <prop type="object" name="validate">
                        <prop type="boolean" name="continueDistributeOnFailure">
                          <default value="false"/>
                        </prop>
                        <prop type="array<object>" name="inVMValidations">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="type" required="True">
                              <enum>
                                <item value="&quot;File&quot;"/>
                                <item value="&quot;PowerShell&quot;"/>
                                <item value="&quot;Shell&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="type" value="File">
                              <prop type="string" name="destination"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                              <prop type="string" name="sourceUri"/>
                            </discriminator>
                            <discriminator property="type" value="PowerShell">
                              <prop type="array<string>" name="inline">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="runAsSystem">
                                <default value="false"/>
                              </prop>
                              <prop type="boolean" name="runElevated">
                                <default value="false"/>
                              </prop>
                              <prop type="string" name="scriptUri"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                              <prop type="array<integer32>" name="validExitCodes">
                                <item type="integer32"/>
                              </prop>
                            </discriminator>
                            <discriminator property="type" value="Shell">
                              <prop type="array<string>" name="inline">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="scriptUri"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                            </discriminator>
                          </item>
                        </prop>
                        <prop type="boolean" name="sourceValidationOnly">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="object" name="vmProfile">
                        <prop type="integer32" name="osDiskSizeGB">
                          <default value="0"/>
                          <format minimum="0"/>
                        </prop>
                        <prop type="array<string>" name="userAssignedIdentities">
                          <item type="string"/>
                        </prop>
                        <prop type="string" name="vmSize">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="object" name="vnetConfig">
                          <prop type="string" name="proxyVmSize">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="string" name="subnetId"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceCreate ref="$Subresource">
            <json>
              <schema type="object" name="parameters.properties.optimize" required="True">
                <prop type="object" name="vmBoot">
                  <prop type="string" name="state" arg="$parameters.properties.optimize.vmBoot.state">
                    <enum>
                      <item value="&quot;Disabled&quot;"/>
                      <item value="&quot;Enabled&quot;"/>
                    </enum>
                  </prop>
                </prop>
              </schema>
            </json>
          </instanceCreate>
        </operation>
        <operation operationId="VirtualMachineImageTemplates_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
            <request method="put">
              <path>
                <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                  <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                </param>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-07-01&quot;"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@ImageTemplate_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="update" version="2022-07-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" subresource="properties.optimize" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.imageTemplateName" options="image-template-name" required="True" group="" idPart="name">
            <help short="The name of the image template."/>
            <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <argGroup name="Parameters.properties.optimize">
          <arg nullable="True" type="object" var="$parameters.properties.optimize.vmBoot" options="vm-boot" group="Parameters.properties.optimize">
            <help short="Optimization is applied on the image for a faster VM boot."/>
            <arg nullable="True" type="string" var="$parameters.properties.optimize.vmBoot.state" options="state">
              <help short="Enabling this field will improve VM boot time by optimizing the final customized image output."/>
              <enum>
                <item name="Disabled" value="&quot;Disabled&quot;"/>
                <item name="Enabled" value="&quot;Enabled&quot;"/>
              </enum>
            </arg>
          </arg>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="properties.optimize"/>
          </json>
        </subresourceSelector>
        <operation operationId="VirtualMachineImageTemplates_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
            <request method="get">
              <path>
                <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                  <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                </param>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-07-01&quot;"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="ImageTemplate_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.VirtualMachineImages/imageTemplates/{}"/>
                    </prop>
                    <prop type="IdentityObject" name="identity" required="True">
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="integer32" name="buildTimeoutInMinutes">
                        <default value="0"/>
                        <format maximum="960" minimum="0"/>
                      </prop>
                      <prop type="array<object>" name="customize">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;File&quot;"/>
                              <item value="&quot;PowerShell&quot;"/>
                              <item value="&quot;Shell&quot;"/>
                              <item value="&quot;WindowsRestart&quot;"/>
                              <item value="&quot;WindowsUpdate&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="File">
                            <prop type="string" name="destination"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="string" name="sourceUri"/>
                          </discriminator>
                          <discriminator property="type" value="PowerShell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="runAsSystem">
                              <default value="false"/>
                            </prop>
                            <prop type="boolean" name="runElevated">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="array<integer32>" name="validExitCodes">
                              <item type="integer32"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="Shell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="WindowsRestart">
                            <prop type="string" name="restartCheckCommand"/>
                            <prop type="string" name="restartCommand"/>
                            <prop type="string" name="restartTimeout"/>
                          </discriminator>
                          <discriminator property="type" value="WindowsUpdate">
                            <prop type="array<string>" name="filters">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="searchCriteria"/>
                            <prop type="integer32" name="updateLimit">
                              <default value="0"/>
                              <format minimum="0"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="array<object>" name="distribute" required="True">
                        <item type="object">
                          <prop type="object" name="artifactTags">
                            <additionalProp>
                              <item type="string"/>
                            </additionalProp>
                          </prop>
                          <prop type="string" name="runOutputName" required="True">
                            <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                          </prop>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;ManagedImage&quot;"/>
                              <item value="&quot;SharedImage&quot;"/>
                              <item value="&quot;VHD&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="ManagedImage">
                            <prop type="string" name="imageId" required="True"/>
                            <prop type="string" name="location" required="True"/>
                          </discriminator>
                          <discriminator property="type" value="SharedImage">
                            <prop type="boolean" name="excludeFromLatest">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="galleryImageId" required="True"/>
                            <prop type="array<string>" name="replicationRegions">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="storageAccountType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                                <item value="&quot;Standard_ZRS&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<object>" name="targetRegions">
                              <item type="object">
                                <prop type="string" name="name" required="True"/>
                                <prop type="integer32" name="replicaCount">
                                  <default value="1"/>
                                  <format minimum="1"/>
                                </prop>
                                <prop type="string" name="storageAccountType">
                                  <enum>
                                    <item value="&quot;Premium_LRS&quot;"/>
                                    <item value="&quot;Standard_LRS&quot;"/>
                                    <item value="&quot;Standard_ZRS&quot;"/>
                                  </enum>
                                </prop>
                              </item>
                            </prop>
                            <prop type="object" name="versioning">
                              <prop type="string" name="scheme" required="True">
                                <enum>
                                  <item value="&quot;Latest&quot;"/>
                                  <item value="&quot;Source&quot;"/>
                                </enum>
                              </prop>
                              <discriminator property="scheme" value="Latest">
                                <prop type="integer32" name="major">
                                  <default value="-1"/>
                                  <format minimum="-1"/>
                                </prop>
                              </discriminator>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="VHD">
                            <prop type="string" name="uri"/>
                          </discriminator>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="exactStagingResourceGroup"/>
                      <prop type="object" name="lastRunStatus">
                        <prop type="dateTime" name="endTime"/>
                        <prop type="string" name="message"/>
                        <prop type="string" name="runState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Canceling&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;PartiallySucceeded&quot;"/>
                            <item value="&quot;Running&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="runSubState">
                          <enum>
                            <item value="&quot;Building&quot;"/>
                            <item value="&quot;Customizing&quot;"/>
                            <item value="&quot;Distributing&quot;"/>
                            <item value="&quot;Optimizing&quot;"/>
                            <item value="&quot;Queued&quot;"/>
                            <item value="&quot;Validating&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="startTime"/>
                      </prop>
                      <prop type="object" name="optimize">
                        <prop type="object" name="vmBoot">
                          <prop type="string" name="state">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="object" name="provisioningError">
                        <prop type="string" name="message"/>
                        <prop type="string" name="provisioningErrorCode">
                          <enum>
                            <item value="&quot;BadCustomizerType&quot;"/>
                            <item value="&quot;BadDistributeType&quot;"/>
                            <item value="&quot;BadManagedImageSource&quot;"/>
                            <item value="&quot;BadPIRSource&quot;"/>
                            <item value="&quot;BadSharedImageDistribute&quot;"/>
                            <item value="&quot;BadSharedImageVersionSource&quot;"/>
                            <item value="&quot;BadSourceType&quot;"/>
                            <item value="&quot;BadStagingResourceGroup&quot;"/>
                            <item value="&quot;BadValidatorType&quot;"/>
                            <item value="&quot;NoCustomizerScript&quot;"/>
                            <item value="&quot;NoValidatorScript&quot;"/>
                            <item value="&quot;Other&quot;"/>
                            <item value="&quot;ServerError&quot;"/>
                            <item value="&quot;UnsupportedCustomizerType&quot;"/>
                            <item value="&quot;UnsupportedValidatorType&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Creating&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="source" required="True">
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;ManagedImage&quot;"/>
                            <item value="&quot;PlatformImage&quot;"/>
                            <item value="&quot;SharedImageVersion&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="ManagedImage">
                          <prop type="string" name="imageId" required="True"/>
                        </discriminator>
                        <discriminator property="type" value="PlatformImage">
                          <prop readOnly="True" type="string" name="exactVersion"/>
                          <prop type="string" name="offer"/>
                          <prop type="object" name="planInfo">
                            <prop type="string" name="planName" required="True"/>
                            <prop type="string" name="planProduct" required="True"/>
                            <prop type="string" name="planPublisher" required="True"/>
                          </prop>
                          <prop type="string" name="publisher"/>
                          <prop type="string" name="sku"/>
                          <prop type="string" name="version"/>
                        </discriminator>
                        <discriminator property="type" value="SharedImageVersion">
                          <prop readOnly="True" type="string" name="exactVersion"/>
                          <prop type="string" name="imageVersionId" required="True"/>
                        </discriminator>
                      </prop>
                      <prop type="string" name="stagingResourceGroup"/>
                      <prop type="object" name="validate">
                        <prop type="boolean" name="continueDistributeOnFailure">
                          <default value="false"/>
                        </prop>
                        <prop type="array<object>" name="inVMValidations">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="type" required="True">
                              <enum>
                                <item value="&quot;File&quot;"/>
                                <item value="&quot;PowerShell&quot;"/>
                                <item value="&quot;Shell&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="type" value="File">
                              <prop type="string" name="destination"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                              <prop type="string" name="sourceUri"/>
                            </discriminator>
                            <discriminator property="type" value="PowerShell">
                              <prop type="array<string>" name="inline">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="runAsSystem">
                                <default value="false"/>
                              </prop>
                              <prop type="boolean" name="runElevated">
                                <default value="false"/>
                              </prop>
                              <prop type="string" name="scriptUri"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                              <prop type="array<integer32>" name="validExitCodes">
                                <item type="integer32"/>
                              </prop>
                            </discriminator>
                            <discriminator property="type" value="Shell">
                              <prop type="array<string>" name="inline">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="scriptUri"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                            </discriminator>
                          </item>
                        </prop>
                        <prop type="boolean" name="sourceValidationOnly">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="object" name="vmProfile">
                        <prop type="integer32" name="osDiskSizeGB">
                          <default value="0"/>
                          <format minimum="0"/>
                        </prop>
                        <prop type="array<string>" name="userAssignedIdentities">
                          <item type="string"/>
                        </prop>
                        <prop type="string" name="vmSize">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="object" name="vnetConfig">
                          <prop type="string" name="proxyVmSize">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="string" name="subnetId"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceUpdate ref="$Subresource">
            <json>
              <schema type="object" name="parameters.properties.optimize" required="True">
                <prop type="object" name="vmBoot" arg="$parameters.properties.optimize.vmBoot">
                  <prop type="string" name="state" arg="$parameters.properties.optimize.vmBoot.state">
                    <enum>
                      <item value="&quot;Disabled&quot;"/>
                      <item value="&quot;Enabled&quot;"/>
                    </enum>
                  </prop>
                </prop>
              </schema>
            </json>
          </instanceUpdate>
        </operation>
        <operation operationId="VirtualMachineImageTemplates_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
            <request method="put">
              <path>
                <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                  <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                </param>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-07-01&quot;"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@ImageTemplate_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
      <command name="remove" version="2022-07-01" confirmation="Are you sure you want to perform this operation?">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" subresource="properties.optimize" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.imageTemplateName" options="image-template-name" required="True" group="" idPart="name">
            <help short="The name of the image template."/>
            <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="properties.optimize"/>
          </json>
        </subresourceSelector>
        <operation operationId="VirtualMachineImageTemplates_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
            <request method="get">
              <path>
                <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                  <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                </param>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-07-01&quot;"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="ImageTemplate_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.VirtualMachineImages/imageTemplates/{}"/>
                    </prop>
                    <prop type="IdentityObject" name="identity" required="True">
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="integer32" name="buildTimeoutInMinutes">
                        <default value="0"/>
                        <format maximum="960" minimum="0"/>
                      </prop>
                      <prop type="array<object>" name="customize">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;File&quot;"/>
                              <item value="&quot;PowerShell&quot;"/>
                              <item value="&quot;Shell&quot;"/>
                              <item value="&quot;WindowsRestart&quot;"/>
                              <item value="&quot;WindowsUpdate&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="File">
                            <prop type="string" name="destination"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="string" name="sourceUri"/>
                          </discriminator>
                          <discriminator property="type" value="PowerShell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="runAsSystem">
                              <default value="false"/>
                            </prop>
                            <prop type="boolean" name="runElevated">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="array<integer32>" name="validExitCodes">
                              <item type="integer32"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="Shell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="WindowsRestart">
                            <prop type="string" name="restartCheckCommand"/>
                            <prop type="string" name="restartCommand"/>
                            <prop type="string" name="restartTimeout"/>
                          </discriminator>
                          <discriminator property="type" value="WindowsUpdate">
                            <prop type="array<string>" name="filters">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="searchCriteria"/>
                            <prop type="integer32" name="updateLimit">
                              <default value="0"/>
                              <format minimum="0"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="array<object>" name="distribute" required="True">
                        <item type="object">
                          <prop type="object" name="artifactTags">
                            <additionalProp>
                              <item type="string"/>
                            </additionalProp>
                          </prop>
                          <prop type="string" name="runOutputName" required="True">
                            <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                          </prop>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;ManagedImage&quot;"/>
                              <item value="&quot;SharedImage&quot;"/>
                              <item value="&quot;VHD&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="ManagedImage">
                            <prop type="string" name="imageId" required="True"/>
                            <prop type="string" name="location" required="True"/>
                          </discriminator>
                          <discriminator property="type" value="SharedImage">
                            <prop type="boolean" name="excludeFromLatest">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="galleryImageId" required="True"/>
                            <prop type="array<string>" name="replicationRegions">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="storageAccountType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                                <item value="&quot;Standard_ZRS&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<object>" name="targetRegions">
                              <item type="object">
                                <prop type="string" name="name" required="True"/>
                                <prop type="integer32" name="replicaCount">
                                  <default value="1"/>
                                  <format minimum="1"/>
                                </prop>
                                <prop type="string" name="storageAccountType">
                                  <enum>
                                    <item value="&quot;Premium_LRS&quot;"/>
                                    <item value="&quot;Standard_LRS&quot;"/>
                                    <item value="&quot;Standard_ZRS&quot;"/>
                                  </enum>
                                </prop>
                              </item>
                            </prop>
                            <prop type="object" name="versioning">
                              <prop type="string" name="scheme" required="True">
                                <enum>
                                  <item value="&quot;Latest&quot;"/>
                                  <item value="&quot;Source&quot;"/>
                                </enum>
                              </prop>
                              <discriminator property="scheme" value="Latest">
                                <prop type="integer32" name="major">
                                  <default value="-1"/>
                                  <format minimum="-1"/>
                                </prop>
                              </discriminator>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="VHD">
                            <prop type="string" name="uri"/>
                          </discriminator>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="exactStagingResourceGroup"/>
                      <prop type="object" name="lastRunStatus">
                        <prop type="dateTime" name="endTime"/>
                        <prop type="string" name="message"/>
                        <prop type="string" name="runState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Canceling&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;PartiallySucceeded&quot;"/>
                            <item value="&quot;Running&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="runSubState">
                          <enum>
                            <item value="&quot;Building&quot;"/>
                            <item value="&quot;Customizing&quot;"/>
                            <item value="&quot;Distributing&quot;"/>
                            <item value="&quot;Optimizing&quot;"/>
                            <item value="&quot;Queued&quot;"/>
                            <item value="&quot;Validating&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="startTime"/>
                      </prop>
                      <prop type="object" name="optimize">
                        <prop type="object" name="vmBoot">
                          <prop type="string" name="state">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="object" name="provisioningError">
                        <prop type="string" name="message"/>
                        <prop type="string" name="provisioningErrorCode">
                          <enum>
                            <item value="&quot;BadCustomizerType&quot;"/>
                            <item value="&quot;BadDistributeType&quot;"/>
                            <item value="&quot;BadManagedImageSource&quot;"/>
                            <item value="&quot;BadPIRSource&quot;"/>
                            <item value="&quot;BadSharedImageDistribute&quot;"/>
                            <item value="&quot;BadSharedImageVersionSource&quot;"/>
                            <item value="&quot;BadSourceType&quot;"/>
                            <item value="&quot;BadStagingResourceGroup&quot;"/>
                            <item value="&quot;BadValidatorType&quot;"/>
                            <item value="&quot;NoCustomizerScript&quot;"/>
                            <item value="&quot;NoValidatorScript&quot;"/>
                            <item value="&quot;Other&quot;"/>
                            <item value="&quot;ServerError&quot;"/>
                            <item value="&quot;UnsupportedCustomizerType&quot;"/>
                            <item value="&quot;UnsupportedValidatorType&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Creating&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="source" required="True">
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;ManagedImage&quot;"/>
                            <item value="&quot;PlatformImage&quot;"/>
                            <item value="&quot;SharedImageVersion&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="ManagedImage">
                          <prop type="string" name="imageId" required="True"/>
                        </discriminator>
                        <discriminator property="type" value="PlatformImage">
                          <prop readOnly="True" type="string" name="exactVersion"/>
                          <prop type="string" name="offer"/>
                          <prop type="object" name="planInfo">
                            <prop type="string" name="planName" required="True"/>
                            <prop type="string" name="planProduct" required="True"/>
                            <prop type="string" name="planPublisher" required="True"/>
                          </prop>
                          <prop type="string" name="publisher"/>
                          <prop type="string" name="sku"/>
                          <prop type="string" name="version"/>
                        </discriminator>
                        <discriminator property="type" value="SharedImageVersion">
                          <prop readOnly="True" type="string" name="exactVersion"/>
                          <prop type="string" name="imageVersionId" required="True"/>
                        </discriminator>
                      </prop>
                      <prop type="string" name="stagingResourceGroup"/>
                      <prop type="object" name="validate">
                        <prop type="boolean" name="continueDistributeOnFailure">
                          <default value="false"/>
                        </prop>
                        <prop type="array<object>" name="inVMValidations">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="type" required="True">
                              <enum>
                                <item value="&quot;File&quot;"/>
                                <item value="&quot;PowerShell&quot;"/>
                                <item value="&quot;Shell&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="type" value="File">
                              <prop type="string" name="destination"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                              <prop type="string" name="sourceUri"/>
                            </discriminator>
                            <discriminator property="type" value="PowerShell">
                              <prop type="array<string>" name="inline">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="runAsSystem">
                                <default value="false"/>
                              </prop>
                              <prop type="boolean" name="runElevated">
                                <default value="false"/>
                              </prop>
                              <prop type="string" name="scriptUri"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                              <prop type="array<integer32>" name="validExitCodes">
                                <item type="integer32"/>
                              </prop>
                            </discriminator>
                            <discriminator property="type" value="Shell">
                              <prop type="array<string>" name="inline">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="scriptUri"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                            </discriminator>
                          </item>
                        </prop>
                        <prop type="boolean" name="sourceValidationOnly">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="object" name="vmProfile">
                        <prop type="integer32" name="osDiskSizeGB">
                          <default value="0"/>
                          <format minimum="0"/>
                        </prop>
                        <prop type="array<string>" name="userAssignedIdentities">
                          <item type="string"/>
                        </prop>
                        <prop type="string" name="vmSize">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="object" name="vnetConfig">
                          <prop type="string" name="proxyVmSize">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="string" name="subnetId"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <operation>
          <instanceDelete ref="$Subresource">
            <json/>
          </instanceDelete>
        </operation>
        <operation operationId="VirtualMachineImageTemplates_CreateOrUpdate">
          <longRunning finalStateVia="azure-async-operation"/>
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
            <request method="put">
              <path>
                <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                  <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                </param>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-07-01&quot;"/>
                </const>
              </query>
              <body>
                <json ref="$Instance"/>
              </body>
            </request>
            <response statusCode="200 201">
              <body>
                <json var="$Instance">
                  <schema type="@ImageTemplate_read"/>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
      </command>
      <command name="show" version="2022-07-01" confirmation="">
        <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.virtualmachineimages/imagetemplates/{}" version="2022-07-01" subresource="properties.optimize" swagger="mgmt-plane/imagebuilder/ResourceProviders/Microsoft.VirtualMachineImages/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuVmlydHVhbE1hY2hpbmVJbWFnZXMvaW1hZ2VUZW1wbGF0ZXMve2ltYWdlVGVtcGxhdGVOYW1lfQ==/V/MjAyMi0wNy0wMQ=="/>
        <argGroup name="">
          <arg type="string" var="$Path.imageTemplateName" options="image-template-name" required="True" group="" idPart="name">
            <help short="The name of the image template."/>
            <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
          </arg>
          <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
          <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
        </argGroup>
        <subresourceSelector var="$Subresource" ref="$Instance">
          <json type="object" name="parameters">
            <prop type="object" name="properties.optimize"/>
          </json>
        </subresourceSelector>
        <operation operationId="VirtualMachineImageTemplates_Get">
          <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}">
            <request method="get">
              <path>
                <param type="string" name="imageTemplateName" arg="$Path.imageTemplateName" required="True">
                  <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                </param>
                <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True"/>
                <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True"/>
              </path>
              <query>
                <const readOnly="True" const="True" type="string" name="api-version" required="True">
                  <default value="&quot;2022-07-01&quot;"/>
                </const>
              </query>
            </request>
            <response statusCode="200">
              <body>
                <json var="$Instance">
                  <schema type="object" cls="ImageTemplate_read">
                    <prop readOnly="True" type="ResourceId" name="id">
                      <format template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.VirtualMachineImages/imageTemplates/{}"/>
                    </prop>
                    <prop type="IdentityObject" name="identity" required="True">
                      <prop type="string" name="type">
                        <enum>
                          <item value="&quot;None&quot;"/>
                          <item value="&quot;UserAssigned&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="userAssignedIdentities">
                        <additionalProp>
                          <item type="object">
                            <prop readOnly="True" type="string" name="clientId"/>
                            <prop readOnly="True" type="string" name="principalId"/>
                          </item>
                        </additionalProp>
                      </prop>
                    </prop>
                    <prop type="ResourceLocation" name="location" required="True"/>
                    <prop readOnly="True" type="string" name="name"/>
                    <prop type="object" name="properties" clientFlatten="True">
                      <prop type="integer32" name="buildTimeoutInMinutes">
                        <default value="0"/>
                        <format maximum="960" minimum="0"/>
                      </prop>
                      <prop type="array<object>" name="customize">
                        <item type="object">
                          <prop type="string" name="name"/>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;File&quot;"/>
                              <item value="&quot;PowerShell&quot;"/>
                              <item value="&quot;Shell&quot;"/>
                              <item value="&quot;WindowsRestart&quot;"/>
                              <item value="&quot;WindowsUpdate&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="File">
                            <prop type="string" name="destination"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="string" name="sourceUri"/>
                          </discriminator>
                          <discriminator property="type" value="PowerShell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="boolean" name="runAsSystem">
                              <default value="false"/>
                            </prop>
                            <prop type="boolean" name="runElevated">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                            <prop type="array<integer32>" name="validExitCodes">
                              <item type="integer32"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="Shell">
                            <prop type="array<string>" name="inline">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="scriptUri"/>
                            <prop type="string" name="sha256Checksum">
                              <default value="&quot;&quot;"/>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="WindowsRestart">
                            <prop type="string" name="restartCheckCommand"/>
                            <prop type="string" name="restartCommand"/>
                            <prop type="string" name="restartTimeout"/>
                          </discriminator>
                          <discriminator property="type" value="WindowsUpdate">
                            <prop type="array<string>" name="filters">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="searchCriteria"/>
                            <prop type="integer32" name="updateLimit">
                              <default value="0"/>
                              <format minimum="0"/>
                            </prop>
                          </discriminator>
                        </item>
                      </prop>
                      <prop type="array<object>" name="distribute" required="True">
                        <item type="object">
                          <prop type="object" name="artifactTags">
                            <additionalProp>
                              <item type="string"/>
                            </additionalProp>
                          </prop>
                          <prop type="string" name="runOutputName" required="True">
                            <format pattern="^[A-Za-z0-9-_.]{1,64}$"/>
                          </prop>
                          <prop type="string" name="type" required="True">
                            <enum>
                              <item value="&quot;ManagedImage&quot;"/>
                              <item value="&quot;SharedImage&quot;"/>
                              <item value="&quot;VHD&quot;"/>
                            </enum>
                          </prop>
                          <discriminator property="type" value="ManagedImage">
                            <prop type="string" name="imageId" required="True"/>
                            <prop type="string" name="location" required="True"/>
                          </discriminator>
                          <discriminator property="type" value="SharedImage">
                            <prop type="boolean" name="excludeFromLatest">
                              <default value="false"/>
                            </prop>
                            <prop type="string" name="galleryImageId" required="True"/>
                            <prop type="array<string>" name="replicationRegions">
                              <item type="string"/>
                            </prop>
                            <prop type="string" name="storageAccountType">
                              <enum>
                                <item value="&quot;Premium_LRS&quot;"/>
                                <item value="&quot;Standard_LRS&quot;"/>
                                <item value="&quot;Standard_ZRS&quot;"/>
                              </enum>
                            </prop>
                            <prop type="array<object>" name="targetRegions">
                              <item type="object">
                                <prop type="string" name="name" required="True"/>
                                <prop type="integer32" name="replicaCount">
                                  <default value="1"/>
                                  <format minimum="1"/>
                                </prop>
                                <prop type="string" name="storageAccountType">
                                  <enum>
                                    <item value="&quot;Premium_LRS&quot;"/>
                                    <item value="&quot;Standard_LRS&quot;"/>
                                    <item value="&quot;Standard_ZRS&quot;"/>
                                  </enum>
                                </prop>
                              </item>
                            </prop>
                            <prop type="object" name="versioning">
                              <prop type="string" name="scheme" required="True">
                                <enum>
                                  <item value="&quot;Latest&quot;"/>
                                  <item value="&quot;Source&quot;"/>
                                </enum>
                              </prop>
                              <discriminator property="scheme" value="Latest">
                                <prop type="integer32" name="major">
                                  <default value="-1"/>
                                  <format minimum="-1"/>
                                </prop>
                              </discriminator>
                            </prop>
                          </discriminator>
                          <discriminator property="type" value="VHD">
                            <prop type="string" name="uri"/>
                          </discriminator>
                        </item>
                      </prop>
                      <prop readOnly="True" type="string" name="exactStagingResourceGroup"/>
                      <prop type="object" name="lastRunStatus">
                        <prop type="dateTime" name="endTime"/>
                        <prop type="string" name="message"/>
                        <prop type="string" name="runState">
                          <enum>
                            <item value="&quot;Canceled&quot;"/>
                            <item value="&quot;Canceling&quot;"/>
                            <item value="&quot;Failed&quot;"/>
                            <item value="&quot;PartiallySucceeded&quot;"/>
                            <item value="&quot;Running&quot;"/>
                            <item value="&quot;Succeeded&quot;"/>
                          </enum>
                        </prop>
                        <prop type="string" name="runSubState">
                          <enum>
                            <item value="&quot;Building&quot;"/>
                            <item value="&quot;Customizing&quot;"/>
                            <item value="&quot;Distributing&quot;"/>
                            <item value="&quot;Optimizing&quot;"/>
                            <item value="&quot;Queued&quot;"/>
                            <item value="&quot;Validating&quot;"/>
                          </enum>
                        </prop>
                        <prop type="dateTime" name="startTime"/>
                      </prop>
                      <prop type="object" name="optimize">
                        <prop type="object" name="vmBoot">
                          <prop type="string" name="state">
                            <enum>
                              <item value="&quot;Disabled&quot;"/>
                              <item value="&quot;Enabled&quot;"/>
                            </enum>
                          </prop>
                        </prop>
                      </prop>
                      <prop type="object" name="provisioningError">
                        <prop type="string" name="message"/>
                        <prop type="string" name="provisioningErrorCode">
                          <enum>
                            <item value="&quot;BadCustomizerType&quot;"/>
                            <item value="&quot;BadDistributeType&quot;"/>
                            <item value="&quot;BadManagedImageSource&quot;"/>
                            <item value="&quot;BadPIRSource&quot;"/>
                            <item value="&quot;BadSharedImageDistribute&quot;"/>
                            <item value="&quot;BadSharedImageVersionSource&quot;"/>
                            <item value="&quot;BadSourceType&quot;"/>
                            <item value="&quot;BadStagingResourceGroup&quot;"/>
                            <item value="&quot;BadValidatorType&quot;"/>
                            <item value="&quot;NoCustomizerScript&quot;"/>
                            <item value="&quot;NoValidatorScript&quot;"/>
                            <item value="&quot;Other&quot;"/>
                            <item value="&quot;ServerError&quot;"/>
                            <item value="&quot;UnsupportedCustomizerType&quot;"/>
                            <item value="&quot;UnsupportedValidatorType&quot;"/>
                          </enum>
                        </prop>
                      </prop>
                      <prop type="string" name="provisioningState">
                        <enum>
                          <item value="&quot;Canceled&quot;"/>
                          <item value="&quot;Creating&quot;"/>
                          <item value="&quot;Deleting&quot;"/>
                          <item value="&quot;Failed&quot;"/>
                          <item value="&quot;Succeeded&quot;"/>
                          <item value="&quot;Updating&quot;"/>
                        </enum>
                      </prop>
                      <prop type="object" name="source" required="True">
                        <prop type="string" name="type" required="True">
                          <enum>
                            <item value="&quot;ManagedImage&quot;"/>
                            <item value="&quot;PlatformImage&quot;"/>
                            <item value="&quot;SharedImageVersion&quot;"/>
                          </enum>
                        </prop>
                        <discriminator property="type" value="ManagedImage">
                          <prop type="string" name="imageId" required="True"/>
                        </discriminator>
                        <discriminator property="type" value="PlatformImage">
                          <prop readOnly="True" type="string" name="exactVersion"/>
                          <prop type="string" name="offer"/>
                          <prop type="object" name="planInfo">
                            <prop type="string" name="planName" required="True"/>
                            <prop type="string" name="planProduct" required="True"/>
                            <prop type="string" name="planPublisher" required="True"/>
                          </prop>
                          <prop type="string" name="publisher"/>
                          <prop type="string" name="sku"/>
                          <prop type="string" name="version"/>
                        </discriminator>
                        <discriminator property="type" value="SharedImageVersion">
                          <prop readOnly="True" type="string" name="exactVersion"/>
                          <prop type="string" name="imageVersionId" required="True"/>
                        </discriminator>
                      </prop>
                      <prop type="string" name="stagingResourceGroup"/>
                      <prop type="object" name="validate">
                        <prop type="boolean" name="continueDistributeOnFailure">
                          <default value="false"/>
                        </prop>
                        <prop type="array<object>" name="inVMValidations">
                          <item type="object">
                            <prop type="string" name="name"/>
                            <prop type="string" name="type" required="True">
                              <enum>
                                <item value="&quot;File&quot;"/>
                                <item value="&quot;PowerShell&quot;"/>
                                <item value="&quot;Shell&quot;"/>
                              </enum>
                            </prop>
                            <discriminator property="type" value="File">
                              <prop type="string" name="destination"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                              <prop type="string" name="sourceUri"/>
                            </discriminator>
                            <discriminator property="type" value="PowerShell">
                              <prop type="array<string>" name="inline">
                                <item type="string"/>
                              </prop>
                              <prop type="boolean" name="runAsSystem">
                                <default value="false"/>
                              </prop>
                              <prop type="boolean" name="runElevated">
                                <default value="false"/>
                              </prop>
                              <prop type="string" name="scriptUri"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                              <prop type="array<integer32>" name="validExitCodes">
                                <item type="integer32"/>
                              </prop>
                            </discriminator>
                            <discriminator property="type" value="Shell">
                              <prop type="array<string>" name="inline">
                                <item type="string"/>
                              </prop>
                              <prop type="string" name="scriptUri"/>
                              <prop type="string" name="sha256Checksum">
                                <default value="&quot;&quot;"/>
                              </prop>
                            </discriminator>
                          </item>
                        </prop>
                        <prop type="boolean" name="sourceValidationOnly">
                          <default value="false"/>
                        </prop>
                      </prop>
                      <prop type="object" name="vmProfile">
                        <prop type="integer32" name="osDiskSizeGB">
                          <default value="0"/>
                          <format minimum="0"/>
                        </prop>
                        <prop type="array<string>" name="userAssignedIdentities">
                          <item type="string"/>
                        </prop>
                        <prop type="string" name="vmSize">
                          <default value="&quot;&quot;"/>
                        </prop>
                        <prop type="object" name="vnetConfig">
                          <prop type="string" name="proxyVmSize">
                            <default value="&quot;&quot;"/>
                          </prop>
                          <prop type="string" name="subnetId"/>
                        </prop>
                      </prop>
                    </prop>
                    <prop readOnly="True" type="object" name="systemData">
                      <prop type="dateTime" name="createdAt"/>
                      <prop type="string" name="createdBy"/>
                      <prop type="string" name="createdByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                      <prop type="dateTime" name="lastModifiedAt"/>
                      <prop type="string" name="lastModifiedBy"/>
                      <prop type="string" name="lastModifiedByType">
                        <enum>
                          <item value="&quot;Application&quot;"/>
                          <item value="&quot;Key&quot;"/>
                          <item value="&quot;ManagedIdentity&quot;"/>
                          <item value="&quot;User&quot;"/>
                        </enum>
                      </prop>
                    </prop>
                    <prop type="object" name="tags">
                      <additionalProp>
                        <item type="string"/>
                      </additionalProp>
                    </prop>
                    <prop readOnly="True" type="string" name="type"/>
                  </schema>
                </json>
              </body>
            </response>
            <response isError="True">
              <body>
                <json>
                  <schema type="@ODataV4Format"/>
                </json>
              </body>
            </response>
          </http>
        </operation>
        <output type="object" ref="$Subresource" clientFlatten="True"/>
      </command>
    </commandGroup>
  </commandGroup>
</CodeGen>
